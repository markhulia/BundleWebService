<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Isab</name>
    </assembly>
    <members>
        <member name="T:Isab.Barcodes.BarcodeDecoder">
            <example>
            <![CDATA[
            BarcodeDecoderSettings sBcrSettings = new BarcodeDecoderSettings();
            sBcrSettings.Parsers.Add(EAN128ParserSettings.CreateDummy());
            sBcrSettings.Parsers.Add(PrefixParserSettings.CreateDummy());
            BarcodeDecoder.DefaultDecoder = new BarcodeDecoder(sBcrSettings);
            MessageBox.Show(BarcodeDecoder.GetFieldValue("item", "P00ITEMNUMBER"));
             ]]>
             </example>
             <summary>
             Uses varius parsers to decode barcodes
             </summary>
        </member>
        <member name="M:Isab.Barcodes.BarcodeDecoder.GetFieldValue(System.String,System.String)">
            <summary>
            Retrives field value from the barcode.
            The DefaultDecoder must be set to use this method.
            </summary>
            <param name="aFieldName">Name of the field that you want the value for.</param>
            <returns>The value for the provided field. If the value is not found null is returned.</returns>
        </member>
        <member name="M:Isab.Barcodes.BarcodeDecoder.GetFieldValue(System.String,System.String,System.String@)">
            <summary>
            Retrives the field value from the barcode
            </summary>
            <param name="aFieldName">Name of the field that you want the value for.</param>
            <param name="aBarcode">The barcode to parse</param>
            <param name="aFieldValue">The fields value</param>
            <returns>True if a value for the field is found if not then false.</returns>
        </member>
        <member name="M:Isab.Barcodes.BarcodeDecoder.#ctor(Isab.Barcodes.BarcodeDecoderSettings)">
            <summary>
            The BarcodeDecoder uses the configured parsers to retrive data from a barcode
            </summary>
            <param name="aSettings"></param>
        </member>
        <member name="M:Isab.Barcodes.BarcodeDecoder.#ctor">
            <summary>
            The BarcodeDecoder uses the configured parsers to retrive data from a barcode
            </summary>
        </member>
        <member name="M:Isab.Barcodes.BarcodeDecoder.GetValue(System.String,System.String)">
            <summary>
            Retrives the field value from the barcode
            </summary>
            <param name="aFieldName">Name of the field that you want the value for.</param>
            <returns>The value for the provided field. If the value is not found null is returned.</returns>
        </member>
        <member name="M:Isab.Barcodes.BarcodeDecoder.TryGetValue(System.String,System.String,System.String@)">
            <summary>
            Retrives the field value from the barcode
            </summary>
            <param name="aFieldName">Name of the field that you want the value for.</param>
            <param name="aBarcode">The barcode to parse</param>
            <param name="aFieldValue">The fields value</param>
            <returns>True if a value for the field is found if not then false.</returns>
        </member>
        <member name="M:Isab.Barcodes.BarcodeDecoder.LoadParsers(Isab.Barcodes.BarcodeDecoderSettings)">
            <summary>
            Creates the parsers that this class will use
            </summary>
            <param name="aSettings"></param>
        </member>
        <member name="P:Isab.Barcodes.BarcodeDecoder.DefaultDecoder">
            <summary>
            The decoder used by the static methods of this class
            </summary>
        </member>
        <member name="P:Isab.Barcodes.BarcodeDecoder.Parsers">
            <summary>
            List of the loaded parsers that is contained in this decoder
            </summary>
        </member>
        <member name="T:Isab.Configuration.IsabConfigurationSection">
            <summary>
            Inherits from <see cref="T:System.Configuration.ConfigurationSection"/>. Hides all original properties 
            in the ConfigurationSection class by applying the Browsable attribute with the 
            value false to all original properties. Also add internal method to deserialize 
            the section.
            </summary>
            <remarks>Classes that inherites from this class can add additional properties
            to hide by adding there names to the mBannedProperties field.</remarks>
            Author: Niklas Lagergren, 2008-08-30
        </member>
        <member name="F:Isab.Configuration.IsabConfigurationSection.mBannedProperties">
            <summary>
            List of properties that should not be visible in a browser window, such as the
            property grid. Add a new property name to this list to set it's Browseable attribute
            to false.
            </summary>
        </member>
        <member name="F:Isab.Configuration.IsabConfigurationSection.mIgnoredErrors">
            <summary>
            Ignore deserialization errors on the elements and attributes in this list
            </summary>
            <value>The ignored errors.</value>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.DeserializeSection(System.Xml.XmlReader)">
            <summary>
            Deserializes the section from xml.
            </summary>
            <param name="aReader">The reader to serialize from.</param>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement,System.String,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Serializes the section to xml.
            </summary>
            <param name="aParentElement">The parent element.</param>
            <param name="aName">The name of the section.</param>
            <param name="aSaveMode">The save mode to use.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.SerializeSection(System.String)">
            <summary>
            Serializes the section to xml.
            </summary>
            <param name="aSectionName">The name of the section</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.SaveToFile(System.String)">
            <summary>
            Saves the ConfigurationSection to a file
            </summary>
            <param name="aFileName">Filename</param>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.LoadFromFile(System.String)">
            <summary>
            Loads the ConfigurationSection from a file
            </summary>
            <param name="aFileName"></param>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.SaveTo(System.IO.Stream)">
            <summary>
            Save this sections data to a stream using sectionname = "section", encoding = utf-8
            </summary>
            <param name="aStream"></param>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.LoadFrom(System.IO.Stream)">
            <summary>
            Load data from a stream
            </summary>
            <param name="aStream"></param>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.LoadFrom(System.String,System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Load data from a file on the isolated storage
            </summary>
            <param name="aFileName"></param>
            <param name="aStorage"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.SaveTo(System.String,System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Save this sections data to isolated storage with the given filename
            </summary>
            <param name="aFileName"></param>
            <param name="aStorage"></param>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.OnDeserializeUnrecognizedAttribute(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            
            </summary>
            <param name="elementName"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"></see> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"></see> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"></see> for this object.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"></see> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"></see> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"></see> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationSection.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="P:Isab.Barcodes.BarcodeDecoderSettings.Parsers">
            <summary>
            Gets the collection of defined configuration sources.
            </summary>
        </member>
        <member name="T:Isab.Barcodes.Configuration.VisualEditing.ParserCollectionEditor">
            <summary>
            Custom class for editing ParserCollections
            </summary>
        </member>
        <member name="T:Isab.Plugins.PluginCollectionEditor">
            <summary>
            Custom Collection Editor for plugins. this class is used when you do not need to arrange the plugins into categorys
            </summary>
        </member>
        <member name="T:Isab.Barcodes.HibcDecoder">
            <summary>
            Decodes HIBC barcodes.
            </summary>
            <remarks>Check of link character is not implemented as Extend does not support this scenario.
            To check the link character the first primary barcode would have to be rememered and supplied to
            the class with the secondary barcode. This will however not be a problem in the current use case, 
            as the custumer that currently are going to use this only has combined barcodes.</remarks>
        </member>
        <member name="M:Isab.Barcodes.HibcDecoder.DecodeSecondaryData(System.String)">
            <summary>
            Parses the secondary part of an HIBC barcode.
            </summary>
            <param name="secondaryData">  The secondary data must already have had its leading 
            + sign and trailing link and check characters removed when this method is called.</param>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.ProductCode">
            <summary>
            Product/article code variable 1 to 13 digit a/n, issued by the supplier.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.LabelerIdentificationCode">
            <summary>
            Labeler Identification Code (LIC) 4 digit a/n, issued by EHIBCC.
            The first character is always an alphabetic character.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.UnitOfMeasure">
            <summary>
            Unit of measure 1 digit numeric.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.Quantity">
            <summary>
            Quantity optional 2 or 5 digit numeric.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.ExpirationDate">
            <summary>
            Expiration date.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.LotNo">
            <summary>
            Lot number.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.SerialNo">
            <summary>
            Serial number.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.Barcode">
            <summary>
            The barcode to decode. The barcode will be decoded when this property is set.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.ValidBarcode">
            <summary>
            Returns true if the barcode is a valid HIBC barcode, otherwise false.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.HibcDecoder.Type">
            <summary>
            The HIBC barcode type (Combined, Primary or Secondary).
            </summary>
        </member>
        <member name="T:Isab.Barcodes.IBarcodeParser">
            <summary>
            Interface representing a Barcode parser
            </summary>
        </member>
        <member name="M:Isab.Barcodes.IBarcodeParser.GetValue(System.String)">
            <summary>
            Returns the value for the provided field.
            The value is parsed from the Barcode property
            </summary>
            <param name="aName">Field to parse for</param>
            <returns>The fields value</returns>
        </member>
        <member name="P:Isab.Barcodes.IBarcodeParser.SupportedFields">
            <summary>
            List of the fields that this parser is able to extract
            </summary>
        </member>
        <member name="P:Isab.Barcodes.IBarcodeParser.Barcode">
            <summary>
            Gets or sets the barcode that will be parsed
            </summary>
        </member>
        <member name="T:Isab.Barcodes.ParserConfigurationElement">
            <summary>
            Base class to use for parser settings elements
            </summary>
        </member>
        <member name="T:Isab.Plugins.PluginConfigurationElement">
            <example>
            <![CDATA[
            public class MyPluginSettings : PluginConfigurationElement
            {
                const string ENABLED = "enabled";
                [ConfigurationProperty(ENABLED)]
                public bool Enabled
                {
                    get
                    {
                        return (bool)this[ENABLED];
                    }
                    set
                    {
                        this[ENABLED] = value;
                    }
                }
                /// <summary>
                /// 
                /// </summary>
                /// <param name="aName">Name of the plugin instance.</param>
                /// <param name="aPluginType">Plugin type that will use the MyPluginSettings</param>
                public MyPluginSettings(string aName, Type aPluginType)
                    : base(aName, aPluginType)
                {
                }
            }
            [ConfigurationElementTypeAttribute(typeof(MyPluginSettings))]
            public class MyPlugin
            {
                public bool Enabled
                {
                    get;
                    protected set;
                }
                public MyPlugin(MyPluginSettings aSettings)
                {
                    Enabled = aSettings.Enabled;
                }
                public void Run()
                {
                    if (Enabled == false) throw new Exception("Im not enabled so you cant run me :'(");
                }
            }
            static void Main(string[] args)
            {
                MyPluginSettings sSettings = new MyPluginSettings("MyPlugin", typeof(MyPlugin));
                sSettings.Enabled = false;
                MyPlugin sPluginInstance = sSettings.CreatePlugin<MyPlugin>();
                sPluginInstance.Run();
            }
            ]]>
             </example>
             <summary>
             Basic PluginConfiguration element. Should be used when creating plugin functions in an application.
             </summary>
        </member>
        <member name="T:Isab.Configuration.Common.NameTypeConfigurationElement">
            <summary>
            Represents a <see cref="T:System.Configuration.ConfigurationElement"/> that has a name and type.
            </summary>
        </member>
        <member name="T:Isab.Configuration.Common.NamedConfigurationElement">
            <summary>
            Represents a named <see cref="T:System.Configuration.ConfigurationElement"/> where the name is the key to a collection.
            </summary>
            <remarks>
            This class is used in conjunction with a <see cref="T:Isab.Configuration.Common.NamedElementCollection`1"/>.
            </remarks>
        </member>
        <member name="T:Isab.Configuration.IsabConfigurationElement">
            <summary>
            Hides all original properties in the ConfigurationElement class by applying
            the Browsable attribute with the value false to all original properties.
            </summary>
            <remarks>Classes that inherites from this class can add additional properties
            to hide by adding there names to the mBannedProperties field.</remarks>
            Author: Niklas Lagergren, 2008-08-30
        </member>
        <member name="F:Isab.Configuration.IsabConfigurationElement.mBannedProperties">
            <summary>
            List of properties that should not be visible in a browser window, such as the
            property grid. Add a new property name to this list to set it's Browseable attribute
            to false.
            </summary>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"></see> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"></see> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"></see> for this object.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"></see> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"></see> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"></see> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"></see> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"></see> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"></see> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElement.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"></see> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"></see> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="T:Isab.Configuration.Common.IObjectWithName">
            <summary>
            Represents the abstraction of an object with a name.
            </summary>
        </member>
        <member name="P:Isab.Configuration.Common.IObjectWithName.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="F:Isab.Configuration.Common.NamedConfigurationElement.NAME__NAME">
            <summary>
            Name of the property that holds the name of <see cref="T:Isab.Configuration.Common.NamedConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.NamedConfigurationElement.#ctor">
            <summary>
            Initialize a new instance of a <see cref="T:Isab.Configuration.Common.NamedConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.NamedConfigurationElement.#ctor(System.String)">
            <summary>
            Intialize a new instance of a <see cref="T:Isab.Configuration.Common.NamedConfigurationElement"/> class with a name.
            </summary>
            <param name="name">The name of the element.</param>
        </member>
        <member name="M:Isab.Configuration.Common.NamedConfigurationElement.DeserializeElement(System.Xml.XmlReader)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Updates the configuration properties of the receiver with the information in the current element in the <paramref name="reader"/>.
            </summary>
            <param name="reader">The reader over the configuration file.</param>
        </member>
        <member name="P:Isab.Configuration.Common.NamedConfigurationElement.Name">
            <summary>
            Gets or sets the name of the element.
            </summary>
            <value>
            The name of the element.
            </value>
        </member>
        <member name="T:Isab.Configuration.Common.IObjectWithNameAndType">
            <summary>
            Represents the abstraction of an object with a name and a type.
            </summary>
        </member>
        <member name="P:Isab.Configuration.Common.IObjectWithNameAndType.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="F:Isab.Configuration.Common.NameTypeConfigurationElement.TYPE__NAME">
            <summary>
            Name of the property that holds the type of <see cref="!:EnterpriseLibrary.Common.Configuration.NameTypeConfigurationElement"/>.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.NameTypeConfigurationElement.#ctor">
            <summary>
            Intialzie an instance of the <see cref="T:Isab.Configuration.Common.NameTypeConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.NameTypeConfigurationElement.#ctor(System.String,System.Type)">
            <summary>
            Initialize an instance of the <see cref="T:Isab.Configuration.Common.NameTypeConfigurationElement"/> class
            </summary>
            <param name="name">The name of the element.</param>
            <param name="type">The <see cref="P:Isab.Configuration.Common.NameTypeConfigurationElement.Type"/> that this element is the configuration for.</param>
        </member>
        <member name="P:Isab.Configuration.Common.NameTypeConfigurationElement.Type">
            <summary>
            Gets or sets the <see cref="P:Isab.Configuration.Common.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            The <see cref="P:Isab.Configuration.Common.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="P:Isab.Configuration.Common.NameTypeConfigurationElement.TypeName">
            <summary>
            Gets or sets the fully qualified name of the <see cref="P:Isab.Configuration.Common.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            the fully qualified name of the <see cref="P:Isab.Configuration.Common.NameTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="F:Isab.Plugins.Configuration.NameAsmTypeConfigurationElement.ASSEMBLY__NAME">
            <summary>
            Name of hte property that holds the assembly
            </summary>
        </member>
        <member name="M:Isab.Plugins.Configuration.NameAsmTypeConfigurationElement.#ctor">
            <summary>
            Intialzie an instance of the <see cref="T:Isab.Configuration.Common.NameTypeConfigurationElement"/> class.
            </summary>
        </member>
        <member name="P:Isab.Plugins.Configuration.NameAsmTypeConfigurationElement.TypeName">
            <summary>
            Gets or sets the fully qualified name of the <see cref="P:Isab.Plugins.Configuration.NameAsmTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            the fully qualified name of the <see cref="P:Isab.Plugins.Configuration.NameAsmTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="P:Isab.Plugins.Configuration.NameAsmTypeConfigurationElement.Type">
            <summary>
            Gets or sets the <see cref="P:Isab.Plugins.Configuration.NameAsmTypeConfigurationElement.Type"/> the element is the configuration for.
            </summary>
            <value>
            The <see cref="P:Isab.Plugins.Configuration.NameAsmTypeConfigurationElement.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="M:Isab.Plugins.PluginConfigurationElement.#ctor(System.String,System.Type)">
            <summary>
            Basic PluginConfiguration element
            </summary>
            <param name="aPluginType">The plugin that owns this configuration</param>
        </member>
        <member name="M:Isab.Plugins.PluginConfigurationElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Isab.Plugins.PluginConfigurationElement.CreatePlugin``1">
            <summary>
            Creates an instance of the plugin
            </summary>
            <typeparam name="returnType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Isab.Plugins.PluginConfigurationElement.CreatePlugin``1(System.Object[])">
            <summary>
            Creates an instance of the plugin
            </summary>
            <typeparam name="returnType">The type of the eturn type.</typeparam>
            <param name="aParams">A params.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Barcodes.ParserConfigurationElement.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="aName">Name of the parser instance</param>
            <param name="aParserType">The parser that uses this settings element</param>
        </member>
        <member name="T:Isab.Barcodes.EAN128Decoder">
            <summary>
            A class for parsing EAN128 barcodes.
            <remarks>Initial version by Anders Brännström.
            To add a new AI:
            1. Add a private member variable, private String mAIXXX
            2. Add a property for the new AI (get/set)
            3. Add a comparison for the new AI in the Decode-method.
            4. Add the new AI in the Clear()-method
            </remarks>
            </summary>
            <example>
            This example shows how to decode the barcode and retrieve an AI.
            mLog an instance of Isab.Log.ILog 
            <code>
            sEAN128.InjectLog( mLog );
            sEAN128.Decode(sEAN128Barcode);
            String sAI10 = sEAN128.AI10;
            </code>
            </example>
            <example>
            This example shows how to subscribe to log messages from another class
            <code>
            Isab.Log.ILog mLog = new Isab.Log.ILog()
            ...
            private function YourFunctionName(string aMsg, string aSource)
            { // do something... }
            </code>
            </example>
        </member>
        <member name="F:Isab.Barcodes.EAN128Decoder.mErrorMessage">
            <summary>
            The current error message, if any
            </summary>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.#ctor">
            <summary>
            Instantiates a new instance of EAN128. Use Decode(String aBarCode) to decode a barcode.
            </summary>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.#ctor(System.String)">
            <summary>
            Instantiates a new instance of EAN128 and decodes the given barcode.
            </summary>
            <param name="aBarCode">The barcode to decode.</param>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.Clear">
            <summary>
            Clears all AI:s
            </summary>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.Decode(System.String)">
            <summary>
            Decodes the given barcode and enters information into the class AI-properties.
            Returns false if any error did occur. An error message can be retrieved with
            the ErrorMessage-property.        
            </summary>
            <param name="aBarcode">The barcode to decode</param>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.GetVariableAI(System.String@)">
            <summary>
            Returns the contents of an AI with variable length.       
            </summary>
            <param name="aBarCode">The barcode to parse. The parsed contents will be
            removed from the barcode.</param>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.RemovePrefix(System.String)">
            <summary>
            Remove some standard EAN components from the start of the barcode data       
            </summary>
            <param name="aBarCode">The barcode to process.</param>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.LogMsg(System.String)">
            <summary>
            Logs a message   
            </summary>
            <param name="aMsg">The message to log. It assumed that this is not an error message</param>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.LogMsg(System.String,System.Boolean)">
            <summary>
            Logs a message with category "Barcode"
            </summary>
            <param name="aMsg">The message to log.</param>
            <param name="aIsError">Indicates if the message is an error message.</param>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.CalculateSSCCChecksum(System.String)">
            <summary>
            Calculates the SSCC checksum digit from the given 17 digits.      
            </summary>
            <param name="aSSCC">The 17 first digits of an SSCC code.</param>
            <exception cref="T:Exception">Thrown if the calculations fail.</exception>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.Substring(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves 0 to sCharCount number of characters from the given string, starting
            from the given position. If the string is e.g. 3 characters long, then these 
            3 chars will be returned when sCharcount is >= 3. 
            An empty string is returned if no characters are left or if the positions aren't valid
            </summary>
            <param name="aString">The string.</param>
            <param name="aStartPos">The position in the string to start read from.</param>
            <param name="aCharcount">The maximum amount of characters to retrieve.</param>
        </member>
        <member name="M:Isab.Barcodes.EAN128Decoder.Substring(System.String,System.Int32)">
            <summary>
            Retrieves the rest of the given string starting from the given start position.
            If the start position isn't valid for the given string then an empty string is returned.
            </summary>
            <param name="aString">The string.</param>
            <param name="aStartPos">The position in the string to start read from.</param>
        </member>
        <member name="P:Isab.Barcodes.EAN128Decoder.ErrorMessage">
            <summary>
            Retrieves the last error message
            </summary>
        </member>
        <member name="T:Isab.Barcodes.Parsers.EAN128.EAN128Parser">
            <summary>
            Parses EAN128 barcodes
            </summary>
        </member>
        <member name="F:Isab.Barcodes.Parsers.EAN128.EAN128Parser.mEAN">
            <summary>
            The "real" EAN decoder that we use
            </summary>
        </member>
        <member name="F:Isab.Barcodes.Parsers.EAN128.EAN128Parser.mAIPropertys">
            <summary>
            AI to property list.. this is used to find where to extract values for AIs
            </summary>
        </member>
        <member name="F:Isab.Barcodes.Parsers.EAN128.EAN128Parser.mSettings">
            <summary>
            Parser settings
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.EAN128.EAN128Parser.#ctor(Isab.Barcodes.Parsers.EAN128.Settings.EAN128ParserSettings)">
            <summary>
            Parses barcode based on the EAN128 standard
            </summary>
            <param name="aSettings">Settings</param>
        </member>
        <member name="P:Isab.Barcodes.Parsers.EAN128.EAN128Parser.Barcode">
            <summary>
            Barcode to parse
            </summary>
        </member>
        <member name="P:Isab.Barcodes.Parsers.EAN128.EAN128Parser.SupportedFields">
            <summary>
            Fields supported by the parser
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.EAN128.Settings.AIElement.#ctor">
            <summary>
            Represents a single AI
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.EAN128.Settings.AIElement.#ctor(System.String)">
            <summary>
            Represents a single AI
            </summary>
        </member>
        <member name="T:Isab.Configuration.GenericConfigurationElementCollection`1">
            <summary>
            Used to implement the <see cref="T:System.Collections.IList"/> interface on an
            <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <typeparam name="T">The type that is stored in the collection.</typeparam>
            <!-- Author: Niklas Lagergren, 2007-12-11 -->
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only. </exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="P:Isab.Configuration.GenericConfigurationElementCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="!:T"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Isab.Configuration.GenericConfigurationElementCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Isab.Configuration.GenericConfigurationElementCollection`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Isab.Barcodes.Parsers.EAN128.Settings.EAN128ParserSettings.CreateDummy">
            <summary>
            Creates a dummy class used as an example
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.Barcodes.Parsers.EAN128.Settings.EAN128ParserSettings.#ctor">
            <summary>
            EAN128Parsers settings class
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.EAN128.Settings.EAN128ParserSettings.#ctor(System.String,System.Type)">
            <summary>
            EAN128Parsers settings class
            </summary>
            <param name="aName">The name that the parser will identify itselfe with</param>
            <param name="aType">The parsertype</param>
        </member>
        <member name="P:Isab.Barcodes.Parsers.EAN128.Settings.EAN128ParserSettings.Fields">
            <summary>
            Gets or sets the field collection
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.EAN128.Settings.FieldElement.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="aName">The name that will be used to identify the field.</param>
        </member>
        <member name="P:Isab.Barcodes.Parsers.EAN128.Settings.FieldElement.Name">
            <summary>
            Gets or sets the name of the field
            </summary>
        </member>
        <member name="T:Isab.Barcodes.Parsers.Easy.EasyParser">
            <summary>
            Passes all barcodes if the requested field is configured
            </summary>
        </member>
        <member name="P:Isab.Barcodes.Parsers.FixedLength.Configuration.FieldElement.Name">
            <summary>
            Gets or sets the name of the field
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.Prefix.PrefixParser.GetValue(System.String)">
            <summary>
            Parses the barcode for the given fieldname
            if the field isent found null is returned.
            </summary>
            <param name="aFieldName"></param>
            <returns></returns>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Prefix.PrefixParser.Barcode">
            <summary>
            Barcode to parse
            </summary>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Prefix.PrefixParser.SupportedFields">
            <summary>
            Fields supported by the parser
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.Prefix.Settings.FieldElement.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="aName">The name that will be used to identify the field.</param>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Prefix.Settings.FieldElement.Name">
            <summary>
            Gets or sets the name of the field
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.Prefix.Settings.PrefixParserSettings.CreateDummy">
            <summary>
            Creates a dummy class
            </summary>
            <returns></returns>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Prefix.Settings.PrefixParserSettings.Fields">
            <summary>
            Gets or sets the field collection
            </summary>
        </member>
        <member name="T:Isab.Barcodes.Parsers.Regex.RegexParser">
            <summary>
            Regex barcode parser.
            </summary>
        </member>
        <member name="T:Isab.Barcodes.Parsers.Regex.Settings.RegexFieldElement">
            <summary>
            Regex parser field settings.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Regex.Settings.RegexFieldElement.RequestedFieldName">
            <summary>
            The field that is requested.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Regex.Settings.RegexFieldElement.FormatString">
            <summary>
            Use the .NET format strings syntax to specify what matching group(s) to return from the 
            matching regex result. Example returning second and third group concatenated with colon as separator:
            {1}:{2}
            </summary>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Regex.Settings.RegexFieldElement.FormatCulture">
            <summary>
            The culture to use with the FormatString setting. Use CurrentCulture to get the current 
            culture in Windows. Leave empty to use the InvariantCulture. Or expicitly specify the culture to use.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Regex.Settings.RegexFieldElement.Regex">
            <summary>
            A regex string to match against the barcode. All groups from the first match is returned. 
            The group(s) to use in the output must be specified in FormatString property.
            </summary>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Regex.Settings.RegexFieldElement.FormatCultureObj">
            <summary>
            CultureInfo object created from parsed value in the FormatCulture property.
            </summary>
        </member>
        <member name="T:Isab.Barcodes.Parsers.Regex.Settings.RegexFieldElementCollection">
            <summary>
            A collection of RegexFieldElements.
            </summary>
        </member>
        <member name="T:Isab.Barcodes.Parsers.Regex.Settings.RegexParserSettings">
            <summary>
            Settings for the RegexParser.
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.Regex.Settings.RegexParserSettings.#ctor">
            <summary>
            Creates a new instance of the RegexParserSettings class.
            </summary>
        </member>
        <member name="M:Isab.Barcodes.Parsers.Regex.Settings.RegexParserSettings.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of the RegexParserSettings class.
            </summary>
            <param name="aName">Parser name</param>
            <param name="aType">Parser class</param>
        </member>
        <member name="P:Isab.Barcodes.Parsers.Regex.Settings.RegexParserSettings.Fields">
            <summary>
            
            </summary>
        </member>
        <member name="T:Isab.Collections.Generic.TimeoutDictionary`2">
            <summary>
            This dictionary has the added timeout functionality witch means that if an item has been
            in the dictionary for too long its automaticly removed..
            </summary>
            <typeparam name="keyType">The type of the ey type.</typeparam>
            <typeparam name="valueType">The type of the alue type.</typeparam>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="aTimeout">How long to keep an item in the dictionary before its automatlicy removed</param>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.ResetTime(`0)">
            <summary>
            Resets the Timeout for the given items key
            </summary>
            <param name="key">The key.</param>
            <returns>
            True if the items timeout value was reset
            </returns>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.</exception>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Isab.Collections.Generic.TimeoutDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Isab.Collections.Generic.TimeoutDictionary`2.Timeout">
            <summary>
            Gets or sets the timeout.
            How long to keep an item in the dictionary before its automatlicy removed
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:Isab.Collections.Generic.TimeoutDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:Isab.Collections.Generic.TimeoutDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:Isab.Collections.Generic.TimeoutDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:valueType"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Isab.Collections.Generic.TimeoutDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Isab.Collections.Generic.TimeoutDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Isab.ComponentModel.Design.GenericCollectionEditor`1">
            <summary>
            Used with the <see cref="!:System.CompomentModel.Editor"/> attribute to be able to 
            use the add and remove button when dealing with some special collections, such as 
            the <see cref="T:System.Configuration.ConfigurationElementCollection"/>s.
            </summary>
            <typeparam name="T">The type that the collection holds</typeparam>
            <!-- Author: Niklas Lagergren, 2007-12-11 -->
        </member>
        <member name="M:Isab.ComponentModel.Design.GenericCollectionEditor`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.ComponentModel.Design.GenericCollectionEditor`1"/> class.
            </summary>
            <param name="type">The type of the collection for this editor to edit.</param>
        </member>
        <member name="M:Isab.ComponentModel.Design.GenericCollectionEditor`1.CanSelectMultipleInstances">
            <summary>
            Indicates whether multiple collection items can be selected at once.
            </summary>
            <returns>
            true if it multiple collection members can be selected at the same time; otherwise, false. 
            By default, this returns false.
            </returns>
        </member>
        <member name="M:Isab.ComponentModel.Design.GenericCollectionEditor`1.CreateCollectionItemType">
            <summary>
            Creates the type of the collection item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.ComponentModel.Design.GenericCollectionEditor`1.CreateInstance(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="itemType">Type of the item.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.Configuration.Common.ConfigurationSourceValidator">
            <summary>
            Validates a configurationsource
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.ConfigurationSourceValidator.Validate">
            <summary>
            Validates the systems default configuration source
            </summary>
        </member>
        <member name="T:Isab.Configuration.Common.Internal.VirtualEditing.NameElementCollectionEditor">
            <summary>
            Editor that supports the creation of NamedElements that has unique names
            </summary>
        </member>
        <member name="T:Isab.Configuration.Common.AssemblyQualifiedTypeNameConverter">
            <summary>
            Represents a configuration converter that converts a string to <see cref="T:System.Type"/> based on a 
            fully qualified name.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.AssemblyQualifiedTypeNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Returns the assembly qualified name for the passed in Type.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly</param>
            <param name="value">Value to convert.</param>
            <param name="destinationType">Type to convert to.</param>
            <returns>Assembly Qualified Name as a string</returns>
        </member>
        <member name="M:Isab.Configuration.Common.AssemblyQualifiedTypeNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Returns a type based on the assembly qualified name passed in as data.
            </summary>
            <param name="context">The container representing this System.ComponentModel.TypeDescriptor.</param>
            <param name="culture">Culture info for assembly.</param>
            <param name="value">Data to convert.</param>
            <returns>Type of the data</returns>
        </member>
        <member name="T:Isab.Configuration.Common.ConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Isab.Configuration.Common.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.ConfigurationSourceElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Configuration.Common.ConfigurationSourceElement"/> class with 
            default values.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.ConfigurationSourceElement.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Configuration.Common.ConfigurationSourceElement"/> class with a 
            name and an type.
            </summary>
            <param name="name">The instance name.</param>
            <param name="type">The type for the represented <see cref="T:Isab.Configuration.Common.IConfigurationSource"/>.</param>
        </member>
        <member name="M:Isab.Configuration.Common.ConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:Isab.Configuration.Common.IConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSourceElement.#ctor">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Isab.Configuration.Xml.XmlConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSourceElement.#ctor(System.String,System.String)">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Isab.Configuration.Xml.XmlConfigurationSource"/>.
            </summary>
            <param name="aName">Configuraiton name.</param>
            <param name="aPath">Configuration file path.</param>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSourceElement.CreateSource">
            <summary>
            Creates an <see cref="!:SqlConfigurationSource"/> instance based on the settings
            in this class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Isab.Configuration.Xml.XmlConfigurationSourceElement.Path">
            <summary>
            The full path to the file name that contains the xml configuration.
            </summary>
        </member>
        <member name="T:Isab.Configuration.Xml.XmlConfigurationSource">
            <summary>
            Represents an xml configuration source.
            </summary>
            <remarks>The class should not be needed to use directly. 
            Instead use the IsabConfigManager.</remarks>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Configuration.Xml.XmlConfigurationSource"/> class.
            </summary>
            <param name="aXmlFilePath">An XML file path.</param>
            <remarks>Uses config.xml in the calling application directory if no path is specified.</remarks>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSource.SaveSection(Isab.Configuration.IIsabConfigurationSection,System.String,System.Configuration.ConfigurationSaveMode,System.Boolean)">
            <summary>
            Saves the section.
            </summary>
            <param name="aSection">The section to save.</param>
            <param name="aSectionName">The name of the section.</param>
            <param name="aSaveMode">The save mode to use when saving.</param>
            <param name="aForceOverwrite">If set to <c>true</c> no check is made to determine if the 
            configuraiton section aldreay has been changed by another user.</param>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSource.SaveSection(Isab.Configuration.IIsabConfigurationSection,System.String,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Saves the section.
            </summary>
            <param name="aSection">The section to save.</param>
            <param name="aSectionName">The name of the section.</param>
            <param name="aSaveMode">The save mode to use when saving.</param>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSource.LoadSection``1(System.String,Isab.Configuration.IScope)">
            <summary>
            Loads the section.
            </summary>
            <param name="aSectionType">The type of the section.</param>
            <param name="aSectionName">The name of the section.</param>
            <param name="aCurrentScope">The current scope.</param>
            <returns>The loaded section.</returns>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSource.TryLoadSection``1(System.String,Isab.Configuration.IScope,``0@)">
            <summary>
            Loads the section.
            </summary>
            <typeparam name="TSectionType">The type of the section.</typeparam>
            <param name="aSectionName">The name of the section.</param>
            <param name="aCurrentScope"></param>
            <param name="aSection">The section that was found</param>
            <returns>true if the section was found</returns>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSource.DoesSectionExists(System.String,Isab.Configuration.IScope)">
            <summary>
            Checks if the section exists.
            </summary>
            <param name="aSectionName">The name of the section.</param>
            <param name="aCurrentScope">The current scope.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.Xml.XmlConfigurationSource.GetExistingSectionExplicit(System.String,Isab.Configuration.IScope)">
            <summary>
            Get an existing section, if the section exists with an exact match regarding to the SectionScope.
            </summary>
            <param name="aSectionName">Name of a section.</param>
            <param name="sConn">The s conn.</param>
            <param name="sSqlWhere">The s SQL where.</param>
            <param name="aSectionScope">A section scope.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.Data.ReadOnlyDataRow">
            <summary>
                A readonly version of the DataRow
            </summary>
        </member>
        <member name="T:Isab.Data.IEDataRow">
            <summary>
            Extended datarow
            </summary>
        </member>
        <member name="T:Isab.Data.IDataRow">
            <summary>
            DataRow interface
            </summary>
        </member>
        <member name="T:Isab.Data.IDataRowGet">
            <summary>
            Getter interface for a DataRow
            </summary>
        </member>
        <member name="T:Isab.Data.IDataRowSet">
            <summary>
            Setter interface for a DataRow
            </summary>
        </member>
        <member name="F:Isab.Data.ReadOnlyDataRow._dataList">
            <summary>
            </summary>
        </member>
        <member name="M:Isab.Data.ReadOnlyDataRow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Isab.Data.ReadOnlyDataRow.#ctor(Isab.Data.IDataRowGet[])">
            <summary>
            
            </summary>
            <param name="aSourceData"></param>
        </member>
        <member name="M:Isab.Data.ReadOnlyDataRow.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object}[])">
            <summary>
            
            </summary>
            <param name="aSourceData"></param>
        </member>
        <member name="M:Isab.Data.ReadOnlyDataRow.SetValue(System.String,System.Object)">
            <summary>
                Sets the value.
            </summary>
            <param name="aKey">A key.</param>
            <param name="aValue">A value.</param>
        </member>
        <member name="M:Isab.Data.ReadOnlyDataRow.GetKeys">
            <summary>
                Gets the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.ReadOnlyDataRow.GetValue(System.String,System.Object)">
            <summary>
                Returns value from the datarow, if not found defaultvalue is returned
            </summary>
            <param name="aKey">A key.</param>
            <param name="aDefaultValue">A default value.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.ReadOnlyDataRow.TryGetValue(System.String,System.Object@)">
            <summary>
                Tries the get value.
            </summary>
            <param name="aKey">The key.</param>
            <param name="aValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.ReadOnlyDataRow.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="aKey"></param>
            <returns></returns>
        </member>
        <member name="P:Isab.Data.ReadOnlyDataRow.Count">
            <summary>
                Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Isab.Data.ReadOnlyDataRow.Item(System.String)">
            <summary>
            
            </summary>
            <param name="aKey"></param>
            <returns></returns>
        </member>
        <member name="T:Isab.Data.EDataRow">
            <summary>
                Basic class implementing IDataRow
            </summary>
        </member>
        <member name="F:Isab.Data.EDataRow.DataList">
            <summary>
            </summary>
        </member>
        <member name="M:Isab.Data.EDataRow.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Isab.Data.DataRow"/> class.
            </summary>
        </member>
        <member name="M:Isab.Data.EDataRow.#ctor(Isab.Data.IDataRowGet[])">
            <summary>
            </summary>
            <param name="aSourceData"></param>
        </member>
        <member name="M:Isab.Data.EDataRow.SetValue(System.String,System.Object)">
            <summary>
                Sets the value.
            </summary>
            <param name="aKey">A key.</param>
            <param name="aValue">A value.</param>
        </member>
        <member name="M:Isab.Data.EDataRow.GetKeys">
            <summary>
                Gets the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.EDataRow.GetValue(System.String,System.Object)">
            <summary>
                Returns value from Dictionary, if not found defaultvalue is returned
            </summary>
            <param name="aKey">A key.</param>
            <param name="aDefaultValue">A default value.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.EDataRow.TryGetValue(System.String,System.Object@)">
            <summary>
                Tries the get value.
            </summary>
            <param name="aKey">The key.</param>
            <param name="aValue">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.EDataRow.Remove(System.String)">
            <summary>
            </summary>
            <param name="aKey"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.EDataRow.Clear">
            <summary>
                Clears this instance.
            </summary>
        </member>
        <member name="M:Isab.Data.EDataRow.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Isab.Data.EDataRow.Count">
            <summary>
                Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Isab.Data.EDataRow.Item(System.String)">
            <summary>
            
            </summary>
            <param name="aKey"></param>
            <returns></returns>
        </member>
        <member name="T:Isab.Data.DataRow">
            <summary>
            Basic class implementing IDataRow
            </summary>
            
        </member>
        <member name="F:Isab.Data.DataRow.DataList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Isab.Data.DataRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Data.DataRow"/> class.
            </summary>
        </member>
        <member name="M:Isab.Data.DataRow.#ctor(Isab.Data.IDataRowGet[])">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Data.DataRow"/> class.
            </summary>
            <param name="aSourceData">Data to add to this datarow</param>
        </member>
        <member name="M:Isab.Data.DataRow.#ctor(Isab.Data.IDataRowTryGet[])">
            <summary>
            
            </summary>
            <param name="aSourceData"></param>
        </member>
        <member name="M:Isab.Data.DataRow.SetValue(System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="aKey">A key.</param>
            <param name="aValue">A value.</param>
        </member>
        <member name="M:Isab.Data.DataRow.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Isab.Data.DataRow.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.DataRow.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="aKey">The key.</param>
            <param name="aVALUE">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.DataRow.GetKeys">
            <summary>
            Gets the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.DataRow.GetValue(System.String,System.Object)">
            <summary>
            Returns value from Dictionary, if not found defaultvalue is returned
            </summary>
            <param name="aKey">A key.</param>
            <param name="aDefaultValue">A default value.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.DataRow.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Isab.Data.DataRow.AddRange(Isab.Data.IDataRowGet)">
            <summary>
            Adds the provided data to this datarow, excluding any field that is already present!
            </summary>
            <param name="aToAdd"></param>
        </member>
        <member name="M:Isab.Data.DataRow.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:Isab.Data.DataRow.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Isab.Data.DataRow.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Isab.Data.DataRowCollection`1">
            <summary>
            A collection of datarows that inplements IDataRowGet
            </summary>
        </member>
        <member name="M:Isab.Data.DataRowCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Data.DataRowCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Isab.Data.DataRowCollection`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Data.DataRowCollection`1"/> class.
            </summary>
            <param name="aParams">A params.</param>
        </member>
        <member name="M:Isab.Data.DataRowCollection`1.GetValue(System.String,System.Object)">
            <summary>
            This method will go throw the list of datarows and return the value 
            for the first row that contains it
            </summary>
            <param name="aKey">Value to find</param>
            <param name="aDefaultValue">Default value</param>
            <returns>Value that was found</returns>
        </member>
        <member name="M:Isab.Data.DataRowCollection`1.SetValue(System.String,System.Object)">
            <summary>
            throws NotImplementedException
            </summary>
            <param name="aKey">A key.</param>
            <param name="aValue">A value.</param>
        </member>
        <member name="M:Isab.Data.DataRowCollection`1.GetKeys">
            <summary>
            Gets the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Isab.Diagnostics.Debug.OutputLogger">
            <summary>
            Loggs data to the output window of visual studio
            </summary>
        </member>
        <member name="M:Isab.Diagnostics.Debug.OutputLogger.#ctor">
            <summary>
            Loggs data to the output window of visual studio
            </summary>
        </member>
        <member name="T:Isab.Exceptions.NotifyUserInformation">
            <summary>
            Exception information class
            </summary>
        </member>
        <member name="M:Isab.Exceptions.NotifyUserInformation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Exceptions.NotifyUserInformation"/> class.
            </summary>
            <param name="aMessage">
            The message to display to the user.. if the Args are set.. then
            this Message and the args will be used with string.Format
            </param>
        </member>
        <member name="M:Isab.Exceptions.NotifyUserInformation.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Exceptions.NotifyUserInformation"/> class.
            </summary>
            <param name="aMessage">The message to display to the user.. if the Args are set.. then
            this Message and the args will be used with string.Format</param>
            <param name="aMessageContainsVariableData">if set to <c>true</c> [the message contains variable data].</param>
        </member>
        <member name="M:Isab.Exceptions.NotifyUserInformation.#ctor(System.String,System.Object[])">
            <summary>
            Exception information
            </summary>
            <param name="aMessage">Used as the format in string.Format</param>
            <param name="aArgs">used as the arg input for string.Format</param>
        </member>
        <member name="M:Isab.Exceptions.NotifyUserInformation.#ctor(System.String,System.Boolean,System.Object[])">
            <summary>
            Exception information
            </summary>
            <param name="aMessage">Used as the format in string.Format</param>
            <param name="aMessageContainsVariableData">if set to <c>true</c> [the message contains variable data].</param>
            <param name="aArgs">used as the arg input for string.Format</param>
        </member>
        <member name="P:Isab.Exceptions.NotifyUserInformation.ErrorCode">
            <summary>
            The ErrorCode asociated with this exception
            </summary>
        </member>
        <member name="P:Isab.Exceptions.NotifyUserInformation.Message">
            <summary>
            The message to display to the user.. if the Args are set.. then
            this Message and the args will be used with string.Format
            </summary>
        </member>
        <member name="P:Isab.Exceptions.NotifyUserInformation.Args">
            <summary>
            The messages arguments
            </summary>
        </member>
        <member name="P:Isab.Exceptions.NotifyUserInformation.MessageContainsVariableData">
            <summary>
            True if the Message property contains variable data.
            (If so then you should not language manage the message!)
            </summary>
        </member>
        <member name="T:Isab.Exceptions.NotifyUserException">
            <summary>
            A none specific exception used when you only want to display a message to the user
            </summary>
        </member>
        <member name="M:Isab.Exceptions.NotifyUserException.#ctor(Isab.Exceptions.NotifyUserInformation)">
            <summary>
            A none specific exception used when you only want to display a message to the user
            </summary>
            <param name="aInformation"></param>
        </member>
        <member name="M:Isab.Exceptions.NotifyUserException.#ctor(System.String)">
            <summary>
            A none specific exception used when you only want to display a message to the user
            </summary>
            <param name="aMessage">Used as the format in string.Format</param>
        </member>
        <member name="M:Isab.Exceptions.NotifyUserException.#ctor(System.String,System.Boolean)">
            <summary>
            A none specific exception used when you only want to display a message to the user
            </summary>
            <param name="aMessage">Used as the format in string.Format</param>
            <param name="aMessageContainsVariableData">
            True if the Message property contains variable data.
            (If so then you should not language manage the message!)
            </param>
        </member>
        <member name="M:Isab.Exceptions.NotifyUserException.#ctor(System.String,System.Object[])">
            <summary>
            A none specific exception used when you only want to display a message to the user
            </summary>
            <param name="aMessage">Used as the format in string.Format</param>
            <param name="aArgs">used as the arg input for string.Format</param>
        </member>
        <member name="M:Isab.Exceptions.NotifyUserException.#ctor(System.String,System.Boolean,System.Object[])">
            <summary>
            A none specific exception used when you only want to display a message to the user
            </summary>
            <param name="aMessage">Used as the format in string.Format</param>
            <param name="aMessageContainsVariableData">
            True if the Message property contains variable data.
            (If so then you should not language manage the message!)
            </param>
            <param name="aArgs">used as the arg input for string.Format</param>
        </member>
        <member name="T:Isab.Plugins.Configuration.NameAsmTypeConfigurationElementCollection`1">
            <summary>
            Represesnts a collection of <see cref="T:Isab.Configuration.Common.NameTypeConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">The type of <see cref="T:Isab.Configuration.Common.NameTypeConfigurationElement"/> object 
            this collection contains.</typeparam>
            <typeparam name="TCustomElementData">The type used for Custom configuration 
            elements in this collection.</typeparam>
        </member>
        <member name="T:Isab.Configuration.Common.PolymorphicConfigurationElementCollection`1">
            <summary>
            Represents the base class from which all implementations of polymorphic configuration collections must derive. 
            </summary>
            <typeparam name="T">The type contained in the collection.</typeparam>	
        </member>
        <member name="T:Isab.Configuration.Common.NamedElementCollection`1">
            <summary>
            Represents a collection of <see cref="T:Isab.Configuration.Common.NamedConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">A newable object that inherits from <see cref="T:Isab.Configuration.Common.NamedConfigurationElement"/>.</typeparam>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the collection.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.Get(System.Int32)">
            <summary>
            Gets the configuration element at the specified index location. 
            </summary>
            <param name="index">The index location of the <see name="T"/> to return. </param>
            <returns>The <see name="T"/> at the specified index. </returns>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.Add(`0)">
            <summary>
            Add an instance of <typeparamref name="T"/> to the collection.
            </summary>
            <param name="element">An instance of <typeparamref name="T"/>.</param>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.Get(System.String)">
            <summary>
            Gets the named instance of <typeparamref name="T"/> from the collection.
            </summary>
            <param name="name">The name of the <typeparamref name="T"/> instance to retrieve.</param>
            <returns>The instance of <typeparamref name="T"/> with the specified key; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.Contains(System.String)">
            <summary>
            Determines if the name exists in the collection.
            </summary>
            <param name="name">The name to search.</param>
            <returns><see langword="true"/> if the name is contained in the collection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.Remove(System.String)">
            <summary>
            Remove the named element from the collection.
            </summary>
            <param name="name">The name of the element to remove.</param>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.Clear">
            <summary>
            Clear the collection.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection. 
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.CreateNewElement">
            <summary>
            Creates a new instance of a <typeparamref name="T"/> object.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Isab.Configuration.Common.NamedElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class. 
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
            <returns>An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Isab.Configuration.Common.PolymorphicConfigurationElementCollection`1.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Called when an unknown element is encountered while deserializing the <see cref="T:System.Configuration.ConfigurationElement"/> object.
            </summary>
            <param name="elementName">The name of the element.</param>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> used to deserialize the element.</param>
            <returns><see langword="true"/> if the element was handled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Isab.Configuration.Common.PolymorphicConfigurationElementCollection`1.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            When overriden in a class, get the configuration object for each <see cref="T:Isab.Configuration.Common.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="M:Isab.Configuration.Common.PolymorphicConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>. 
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Isab.Configuration.Common.PolymorphicConfigurationElementCollection`1.CreateNewElement(System.String)">
            <summary>
            Creates a new named <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <param name="elementName">The name of the element to create.</param>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement"/>.</returns>
        </member>
        <member name="M:Isab.Configuration.Common.PolymorphicConfigurationElementCollection`1.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Reverses the effect of merging configuration information from different levels of the configuration hierarchy.
            </summary>
            <param name="sourceElement">A <see cref="T:System.Configuration.ConfigurationElement"/> object at the current level containing a merged view of the properties.</param>
            <param name="parentElement">The parent <see cref="T:System.Configuration.ConfigurationElement"/> object of the current element, or a <see langword="null"/> reference (Nothing in Visual Basic) if this is the top level.</param>		
            <param name="saveMode">One of the <see cref="T:System.Configuration.ConfigurationSaveMode"/> values.</param>
        </member>
        <member name="M:Isab.Plugins.Configuration.NameAsmTypeConfigurationElementCollection`1.GetConfigurationType(System.String,System.String)">
            <summary>
            Get the configuration type that will be used
            </summary>
            <param name="sAssemblyName"></param>
            <param name="sTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Plugins.Configuration.NameAsmTypeConfigurationElementCollection`1.ParseAssemblyType(System.Xml.XmlReader,System.String@,System.String@)">
            <summary>
            Extract the assembly and type from the elements attributes
            </summary>
            <param name="reader"></param>
            <param name="sAssemblyName"></param>
            <param name="sTypeName"></param>
            <returns></returns>
        </member>
        <member name="T:Isab.Configuration.Common.ConfigurationElementTypeAttribute">
            <summary>
            Indicates the configuration object type that is used for the attributed object.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.ConfigurationElementTypeAttribute.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:Isab.Configuration.Common.ConfigurationElementTypeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.ConfigurationElementTypeAttribute.#ctor(System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:Isab.Configuration.Common.ConfigurationElementTypeAttribute"/> class with the configuration object type.
            </summary>
            <param name="configurationType">The <see cref="T:System.Type"/> of the configuration object.</param>
        </member>
        <member name="P:Isab.Configuration.Common.ConfigurationElementTypeAttribute.ConfigurationType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the configuration object.
            </summary>
            <value>
            The <see cref="T:System.Type"/> of the configuration object.
            </value>
        </member>
        <member name="T:Isab.Configuration.Common.ConfigurationSourceFactory">
            <summary>
            Contains factory methods to create configuration sources.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Common.ConfigurationSourceFactory.Create(System.String)">
            <summary>
            Creates a new configuration sources based on the configuration information from 
            the application's default configuration file.
            </summary>
            <param name="name">The name for the desired configuration source.</param>
            <returns>The new configuration source instance described in the configuration file.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">when no configuration information is found for name <paramref name="name"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="name"/> is null or empty.</exception>
        </member>
        <member name="M:Isab.Configuration.Common.ConfigurationSourceFactory.Create">
            <summary>
            Creates a new configuration source based on the default configuration information from the 
            application's default configuration file.
            </summary>
            <returns>The new configuration source instance described as the default in the configuration file,
            or a new instance of <see cref="!:SystemConfigurationSource"/> if the is no configuration sources configuration.</returns>
            <exception cref="T:Isab.Configuration.Common.ConfigurationSourceSection">when there is a configuration section but it does not define
            a default configurtion source, or when the configuration for the defined default configuration source is not found.</exception>
        </member>
        <member name="T:Isab.Configuration.Common.ConfigurationSourceSection">
            <summary>
            Configuration section for the configuration sources.
            </summary>
            <remarks>
            This configuration must reside in the application's default configuration file.
            </remarks>
        </member>
        <member name="M:Isab.Configuration.Common.ConfigurationSourceSection.GetSection">
            <summary>
            Returns the <see cref="T:Isab.Configuration.Common.ConfigurationSourceSection"/> from the application's default 
            configuration file.
            </summary>
            <returns>The section from the configuration file, or <see langword="null"/> 
            (<b>Nothing</b> in Visual Basic) if the section is not present in the 
            configuration file.</returns>
        </member>
        <member name="P:Isab.Configuration.Common.ConfigurationSourceSection.SelectedSource">
            <summary>
            Gets or sets the name for the default configuration source.
            </summary>
        </member>
        <member name="P:Isab.Configuration.Common.ConfigurationSourceSection.Sources">
            <summary>
            Gets the collection of defined configuration sources.
            </summary>
        </member>
        <member name="T:Isab.Configuration.Common.GenericEnumeratorWrapper`1">
            <devdoc>
            Represents a genereic enumerator for the NamedElementCollection.
            </devdoc>	
        </member>
        <member name="T:Isab.Configuration.Common.NameTypeConfigurationElementCollection`2">
            <summary>
            Represesnts a collection of <see cref="T:Isab.Configuration.Common.NameTypeConfigurationElement"/> objects.
            </summary>
            <typeparam name="T">The type of <see cref="T:Isab.Configuration.Common.NameTypeConfigurationElement"/> object 
            this collection contains.</typeparam>
            <typeparam name="TCustomElementData">The type used for Custom configuration 
            elements in this collection.</typeparam>
        </member>
        <member name="M:Isab.Configuration.Common.NameTypeConfigurationElementCollection`2.RetrieveConfigurationElementType(System.Xml.XmlReader)">
            <summary>
            Get the configuration object for each <see cref="T:Isab.Configuration.Common.NameTypeConfigurationElement"/> object in the collection.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> that is deserializing the element.</param>
        </member>
        <member name="T:Isab.Configuration.ConfigurationObj">
            <summary>
            Manage <see cref="T:Isab.Configuration.IsabConfigurationSection"/>s.
            </summary>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.#ctor(Isab.Configuration.Common.IConfigurationSource,Isab.Configuration.IScope)">
            <summary>
            Initializes a new instance of the <see cref="N:Isab.Configuration"/> class.
            </summary>
            <param name="aConfigurationSource">The configuration source to use.</param>
            <param name="aCurrentScope">The current configuration scope.</param>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.GetSection``1(System.String)">
            <summary>
            Gets a <see cref="!:IsabConfiguraitonSection"/> from the current source.
            </summary>
            <param name="aSectionName">Name of the section to get.</param>
            <returns><see cref="T:Isab.Configuration.IsabConfigurationSection"/></returns>
            <remarks>Once a section is retrived it is cached in memory and subsequent calls
            will retrive the section form the cache instead. Call the ClearCache method
            to force the sections to be reread from the source.</remarks>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.TryGetSection``1(System.String,``0@)">
            <summary>
            Gets a <see cref="!:IsabConfiguraitonSection"/> from the current source.
            </summary>
            <param name="aSectionName">Name of the section to get.</param>
            <param name="aSection">The found section</param>
            <returns>true if the section was found</returns>
            <remarks>Once a section is retrived it is cached in memory and subsequent calls
            will retrive the section form the cache instead. Call the ClearCache method
            to force the sections to be reread from the source.</remarks>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.GetSectionDefault``1(System.String,Isab.Configuration.IScope)">
            <summary>
            Gets a <see cref="!:IsabConfiguraitonSection"/> from the current source.
            If the section doesn't exists a new section with it's default values is
            returned.
            </summary>
            <typeparam name="TSection">The type of the section.</typeparam>
            <param name="aSectionName">The name of the section.</param>
            <param name="aDefaultScope">The default scope used to create the configuration
            section if it doesn't exists. Note that it still will look for the configuration section
            using the scope assosiated with the instance of this class. It null is passed it
            will use the scope assosiated with the instance of this class when a creating 
            a new configuration section.</param>
            <returns></returns>
            <remarks>Once a section is retrived it is cached in memory and subsequent calls
            will retrive the section form the cache instead. Call the ClearCache method
            to force the sections to be reread from the source.
            If the section doesn't exists it will also be created and saved in the configuration
            source.</remarks>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.GetSectionDefault``1(System.String)">
            <summary>
            Gets a <see cref="!:IsabConfiguraitonSection"/> from the current source.
            If the section doesn't exists a new section with it's default values is
            returned.
            </summary>
            <typeparam name="TSection">The type of the section.</typeparam>
            <param name="aSectionName">The name of the section.</param>
            <param name="aDefaultScope">The default scope used to create the configuration
            section if it doesn't exists. Note that it still will look for the configuration section
            using the scope assosiated with the instance of this class.</param>
            <returns></returns>
            <remarks>Once a section is retrived it is cached in memory and subsequent calls
            will retrive the section form the cache instead. Call the ClearCache method
            to force the sections to be reread from the source.
            If the section doesn't exists it will also be created and saved in the configuration
            source. This overload will use the scope assosiated with the instance of this class 
            when a creating a new configuration section.</remarks>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.GetSectionDefault``1">
            <summary>
            Gets a <see cref="!:IsabConfiguraitonSection"/> from the current source.
            If the section doesn't exists a new section with it's default values is
            returned. This overload uses the passed type name as the sections name,
            with the first letter converted to lover case.
            </summary>
            <typeparam name="TSection">The type of the section.</typeparam>
            <param name="aSectionName">The name of the section.</param>
            <returns></returns>
            <remarks>Once a section is retrived it is cached in memory and subsequent calls
            will retrive the section form the cache instead. Call the ClearCache method
            to force the sections to be reread from the source.
            If the section doesn't exists it will also be created and saved in the configuration
            source.This overload will use the scope assosiated with the instance of this class 
            when a creating a new configuration section.</remarks>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.ClearCache">
            <summary>
            Discards any changes made sens the last save by clearing the local cache.
            Also forces the sections to be read from the source the next time GetSection is called.
            </summary>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.ClearCache``1">
            <summary>
            Discards any changes made to the specifyed section since the last save by clearing the local cache.
            Also forces the sections to be read from the source the next time GetSection is called.
            </summary>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.ClearCache(System.String)">
            <summary>
            Discards any changes made to the specifyed section since the last save by clearing the local cache.
            Also forces the sections to be read from the source the next time GetSection is called.
            </summary>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.AddSection(Isab.Configuration.IIsabConfigurationSection,System.String)">
            <summary>
            Adds a new section.
            </summary>
            <param name="aSection">The section to add.</param>
            <param name="aSectionName">Name of the section to add.</param>
            <remarks>The section is only added to memory, call the Save method to persist 
            the changes to the source.</remarks>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.RemoveSection(Isab.Configuration.IIsabConfigurationSection,System.String)">
            <summary>
            Removes the section.
            </summary>
            <param name="aSection">The section to remove.</param>
            <param name="aSectionName">Name of the section to remove.</param>
            <remarks>The section is only removed in memory, call the Save method to persist 
            the changes to the source.</remarks>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.SetSection(Isab.Configuration.IIsabConfigurationSection,System.String)">
            <summary>
            Sets the section.
            </summary>
            <param name="aSection">The section to set.</param>
            <param name="aSectionName">The name of the section.</param>
            <remarks>The section is only updated in memory, call the Save method to persist 
            the changes to the configuration source.</remarks>		
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.Save(System.Boolean)">
            <summary>
            Perists the configuraiton changes to the configuraiton source.
            </summary>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.GetDefaultSectionName``1">
            <summary>
            Returns the default section name for the provided type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.GetSectionName(System.Type)">
            <summary>
            Gets the name of the section from the type.
            </summary>
            <returns>The name of the section based on the type name with the first letter as
            a lovercase letter.</returns>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.RemoveSectionInternal(Isab.Configuration.IIsabConfigurationSection,System.String)">
            <summary>
            Removes the section internal.
            </summary>
            <param name="aSection">A section.</param>
            <param name="aSectionName">Name of a section.</param>
            <remarks>No lock, must lock around call to this method.</remarks>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.AddSectionInternal(Isab.Configuration.IIsabConfigurationSection,System.String)">
            <summary>
            Adds the section internal.
            </summary>
            <param name="aSection">A section.</param>
            <param name="aSectionName">Name of a section.</param>
            <remarks>No lock, must lock around call to this method.</remarks>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.System#Collections#Generic#IEnumerable{Isab#Configuration#IIsabConfigurationSection}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObj.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Isab.Configuration.ConfigurationObj.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Isab.Configuration.IsabConfigurationSection"/> with the specified section name.
            </summary>
            <value></value>
            <remarks>See the GetSection and SetSection methods for more information on how the 
            configuraiton sections are set and retrived.</remarks>
        </member>
        <member name="T:Isab.IO.Scanner.StringExtentions">
            <summary>
            Extentions usable by strings
            </summary>
        </member>
        <member name="M:Isab.IO.Scanner.StringExtentions.ToCharArray(System.String[])">
            <summary>
            Converts a string array to a char array based on the strings ToChar function
            </summary>
            <param name="aStringArray"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.IO.Scanner.StringExtentions.ToChar(System.String,System.Char@)">
            <summary>
            Converts a string expression to a char expression.
            Example: if you enter the string "\13" the returned char will be CR (ascii 13)
            </summary>
            <param name="aString"></param>
            <param name="aChar"></param>
            <returns>true if the method could convert the string expression into a char</returns>
        </member>
        <member name="M:Isab.Log.DatabaseDestination.CheckDisposed">
            <summary>
            Checks if the object is disposed and if so throw an ObjectDisposedException.
            </summary>
        </member>
        <member name="M:Isab.Log.DatabaseDestination.Dispose">
            <summary>
            Closes the log file and removes any references made to external streams.
            </summary>       
        </member>
        <member name="M:Isab.Log.DatabaseDestination.Dispose(System.Boolean)">
            <summary>
            Closes the log file and removes any references made to external streams.
            </summary>       
        </member>
        <member name="M:Isab.Log.DatabaseDestination.Finalize">
            <summary>
            Finalizer to make sure that dispose is called.
            </summary>
        </member>
        <member name="T:Isab.Log.LogTextWriter">
            <summary>
            TextWriter class that writes its text to a log object
            </summary>
        </member>
        <member name="P:Isab.Log.LogTextWriter.Log">
            <summary>
            Gets or sets the object to use when logging
            </summary>
        </member>
        <member name="P:Isab.Log.LogTextWriter.LogLevel">
            <summary>
            Gets or sets the log level to use when logging
            </summary>
        </member>
        <member name="T:Isab.Log.LogDestinationElement">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Isab.Configuration.Common.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Isab.Log.LogDestinationElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:LogDestinationConfigurationElement"/> class with 
            default values.
            </summary>
        </member>
        <member name="M:Isab.Log.LogDestinationElement.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="!:LogDestinationConfigurationElement"/> class with a 
            name and an type.
            </summary>
            <param name="name">The instance name.</param>
            <param name="type">The type for the represented <see cref="T:Isab.Log.ILogDestination"/>.</param>
        </member>
        <member name="M:Isab.Log.LogDestinationElement.CreateLogDestination(Isab.Log.ILogScope)">
            <summary>
            Returns a new <see cref="T:Isab.Log.ILogDestination"/> configured with the receiver's settings.
            </summary>
            <returns>A new log destination.</returns>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SectionsEditor.SaveConfiguration">
            <summary>
            Saves the configuration.
            </summary>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.SectionsEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SectionsEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SectionsEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Isab.Configuration.VisualEditing.SectionsEditor.ConfigurationList">
            <summary>
            Gets or sets the configuration list shown in the editor.
            </summary>
            <value>The configuration list.</value>
        </member>
        <member name="T:Isab.Configuration.ConfigurationObjFactory">
            <summary>
            Static methods to create a <see cref="T:Isab.Configuration.ConfigurationObj"/>.
            </summary>
        </member>
        <member name="M:Isab.Configuration.ConfigurationObjFactory.Create(Isab.Configuration.IScope,System.String)">
            <summary>
            Creates a <see cref="!:ConfiguraionObj"/> from with the specified scope from the
            named source.
            </summary>
            <param name="aCurrentScope">The current scope.</param>
            <param name="aSourceName">Name of the configuration source.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.Configuration.VisualEditing.ConfigurationSourceSelector">
            <summary>
            Control to select and edit the configuration sources.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Configuration.VisualEditing.ConfigurationSourceSelector"/> class.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.LoadConfiguration">
            <summary>
            Loads the configuration.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.SaveConfiguration">
            <summary>
            Saves the configuration.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.editLinkLabel_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Handles the LinkClicked event of the editLinkLabel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.CloneConfigurationSection(Isab.Configuration.IsabConfigurationSection)">
            <summary>
            Clones the configuration section.
            </summary>
            <param name="aSection">The section to clone.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.newLinkLabel_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Handles the LinkClicked event of the newLinkLabel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.deleteLinkLabel_LinkClicked(System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
            <summary>
            Handles the LinkClicked event of the deleteLinkLabel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.sourcesComboBox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the sourcesComboBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Isab.Configuration.VisualEditing.ConfigurationSourceSelector.Config">
            <summary>
            Gets the config.
            </summary>
            <value>The config.</value>
        </member>
        <member name="T:Isab.Configuration.VisualEditing.IConfigurationSourceEditor">
            <summary>
            Interface used to implement a custom configuration source editor.
            </summary>
            <remarks>
            A custom configuration source editor can be specified on the custom
            configuraiton source element by applying the <see cref="T:Isab.Configuration.VisualEditing.ConfigurationElementEditorAttribute"/>.
            </remarks>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.IConfigurationSourceEditor.Display(System.Windows.Forms.IWin32Window,Isab.Configuration.Common.ConfigurationSourceElement,System.Configuration.Configuration)">
            <summary>
            When called the implementor should display an editor for the configuration
            source element and return true if the changes should be used or false
            if the changes should be disregarded.
            </summary>
            <param name="aParent">The parent window.</param>
            <param name="aSource">The configuration source to edit.</param>
            <param name="aConfig">The configuration file that contains the configuration source element.
            This should genereally not be used but are passed along soo that the SqlConfigurationSource
            can change the connection strings.</param>
            <returns>
            Return true if the changes should be used or false
            if the changes should be disregarded.
            </returns>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.DefaultConfigurationSourceEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.DefaultConfigurationSourceEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.DefaultConfigurationSourceEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.DefaultEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.DefaultEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.DefaultEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.NewConfigurationSourceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.NewConfigurationSourceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.NewConfigurationSourceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.Internal.RelatedAppInfo.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.Internal.RelatedAppInfo.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.Internal.RelatedAppInfo.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.ScopeEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ScopeEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ScopeEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.ScopeItemEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ScopeItemEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.ScopeItemEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Isab.Configuration.SectionInformationEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Configuration.SectionInformationEx"/> class.
            </summary>
        </member>
        <member name="M:Isab.Configuration.SectionInformationEx.#ctor(Isab.Configuration.IScope,System.String,System.String,System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Configuration.SectionInformationEx"/> class.
            </summary>
            <param name="aSectionScope">The section scope.</param>
            <param name="aSectionName">The name of the section.</param>
            <param name="aSectionType">The type of the section.</param>
        </member>
        <member name="M:Isab.Configuration.SectionInformationEx.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Isab.Configuration.SectionInformationEx.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Isab.Configuration.SectionInformationEx.ToReadableXml(System.String)">
            <summary>
            Formats an xml string so that it is more readable
            </summary>
            <param name="aString"></param>
            <returns></returns>
        </member>
        <member name="P:Isab.Configuration.SectionInformationEx.SectionScope">
            <summary>
            Gets the section scope.
            </summary>
            <value>The section scope.</value>
        </member>
        <member name="P:Isab.Configuration.SectionInformationEx.SectionName">
            <summary>
            Gets the name of the section.
            </summary>
            <value>The name of the section.</value>
        </member>
        <member name="P:Isab.Configuration.SectionInformationEx.SectionType">
            <summary>
            Gets the type of the section.
            </summary>
            <value>The type of the section.</value>
        </member>
        <member name="P:Isab.Configuration.SectionInformationEx.RowVersion">
            <summary>
            Gets the row version.
            </summary>
            <value>The row version.</value>
        </member>
        <member name="P:Isab.Configuration.SectionInformationEx.SectionData">
            <summary>
            Gets or sets the xml for the underlying section.
            </summary>
            <value>The xml for the underlying section.</value>
        </member>
        <member name="T:Isab.Configuration.Sql.SqlConfigurationSource">
            <summary>
            Represents a sql configuration source.
            </summary>
            <remarks>The class should not be needed to use directly. 
            Instead use the IsabConfigManager.</remarks>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSource.#ctor(System.Configuration.ConnectionStringSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Configuration.Sql.SqlConfigurationSource"/> class.
            </summary>
            <param name="aConnectionString">The connection string settings to use.</param>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Configuration.Sql.SqlConfigurationSource"/> class.
            </summary>
            <param name="aConnectionStringName">The name of a connection string in the 
            app.config to use.</param>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSource.SaveSection(Isab.Configuration.IIsabConfigurationSection,System.String,System.Configuration.ConfigurationSaveMode,System.Boolean)">
            <summary>
            Saves the section.
            </summary>
            <param name="aSection">The section to save.</param>
            <param name="aSectionName">The name of the section.</param>
            <param name="aSaveMode">The save mode to use when saving.</param>
            <param name="aForceOverwrite">If set to <c>true</c> no check is made to determine if the 
            configuraiton section aldreay has been changed by another user.</param>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSource.SaveSection(Isab.Configuration.IIsabConfigurationSection,System.String,System.Configuration.ConfigurationSaveMode)">
            <summary>
            Saves the section.
            </summary>
            <param name="aSection">The section to save.</param>
            <param name="aSectionName">The name of the section.</param>
            <param name="aSaveMode">The save mode to use when saving.</param>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSource.LoadSection``1(System.String,Isab.Configuration.IScope)">
            <summary>
            Loads the section.
            </summary>
            <typeparam name="TSectionType">The type of the section.</typeparam>
            <param name="aSectionName">The name of the section.</param>
            <param name="aCurrentScope"></param>
            <returns>The section</returns>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSource.TryLoadSection``1(System.String,Isab.Configuration.IScope,``0@)">
            <summary>
            Loads the section.
            </summary>
            <typeparam name="TSectionType">The type of the section.</typeparam>
            <param name="aSectionName">The name of the section.</param>
            <param name="aCurrentScope"></param>
            <param name="aSection">The section that was found</param>
            <returns>true if the section was found</returns>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSource.DoesSectionExists(System.String,Isab.Configuration.IScope)">
            <summary>
            Checks if the section exists.
            </summary>
            <param name="aSectionName">The name of the section.</param>
            <param name="aCurrentScope">The current scope.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSource.ValidateConnection">
            <summary>
            Connects to the given database.. and trows an exception if the connection fails
            </summary>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSource.DoesExplicitSectionExists(System.String,System.Data.SqlClient.SqlConnection,System.String,Isab.Configuration.IScope)">
            <summary>
            Checks if the section exists, with an exact match regarding to the SectionScope.
            </summary>
            <param name="aSectionName">Name of a section.</param>
            <param name="sConn">The s conn.</param>
            <param name="sSqlWhere">The s SQL where.</param>
            <param name="aSectionScope">A section scope.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSourceElement.#ctor">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Isab.Configuration.Sql.SqlConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSourceElement.#ctor(System.String,System.String)">
            <summary>
            Represents the configuration settings that describe an <see cref="T:Isab.Configuration.Sql.SqlConfigurationSource"/>.
            </summary>
            <param name="name"></param>
            <param name="connectionString"></param>
            <param name="getStoredProcedure"></param>
            <param name="setStoredProcedure"></param>
            <param name="refreshStoredProcedure"></param>
            <param name="removeStoredProcedure"></param>
        </member>
        <member name="M:Isab.Configuration.Sql.SqlConfigurationSourceElement.CreateSource">
            <summary>
            Creates an <see cref="T:Isab.Configuration.Sql.SqlConfigurationSource"/> instance based on the settings
            in this class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Isab.Configuration.Sql.SqlConfigurationSourceElement.ConnectionStringName">
            <summary>
            The name of the connection string used to connect to the database.
            </summary>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.SelectConfigurationSourceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SelectConfigurationSourceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SelectConfigurationSourceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SqlConfigurationSourceEditor.Display(System.Windows.Forms.IWin32Window,Isab.Configuration.Common.ConfigurationSourceElement,System.Configuration.Configuration)">
            <summary>
            Displays an editor for the sql configuration
            source element and return true if the changes should be used or false
            if the changes should be disregarded.
            </summary>
            <param name="aParent">The parent window.</param>
            <param name="aSource">The configuration source to edit.</param>
            <param name="aConfig">The configuration file that contains the configuration source element.
            This should genereally not be used but are passed along soo that the SqlConfigurationSource
            can change the connection strings.</param>
            <returns>
            Return true if the changes should be used or false
            if the changes should be disregarded.
            </returns>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SqlConfigurationSourceEditor.connectionStringComboBox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndexChanged event of the connectionStringComboBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SqlConfigurationSourceEditor.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the okButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SqlConfigurationSourceEditor.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the cancelButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.SqlConfigurationSourceEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SqlConfigurationSourceEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.SqlConfigurationSourceEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Data.VisualEditing.CreateDatabaseDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.CreateDatabaseDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.CreateDatabaseDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Data.VisualEditing.CreateDatabaseView1.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.CreateDatabaseView1.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.CreateDatabaseView1.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Data.VisualEditing.CreateDatabaseView2.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.CreateDatabaseView2.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.CreateDatabaseView2.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditorForm.Display(System.Windows.Forms.IWin32Window,System.String@,System.String@)">
            <summary>
            Displays a new instance of the connection string editor form.
            </summary>
            <param name="aParent">The parent.</param>
            <param name="arConnectionName">Name of the connection.</param>
            <param name="arConnectionString">The connection string.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditorForm.Display(System.Windows.Forms.IWin32Window,System.String,System.String@,System.String@)">
            <summary>
            Displays a new instance of the connection string editor form.
            </summary>
            <param name="aParent">The parent.</param>
            <param name="aDatabaseScript">Script that will be used to create a new database structure (this script should not include CREATE DATABASE calls..)</param>
            <param name="arConnectionName">Name of the connection.</param>
            <param name="arConnectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditorForm.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the okButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditorForm.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the cancelButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Isab.Data.VisualEditing.SqlConnectionStringEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Isab.Data.VisualEditing.SqlConnectionStringEditor">
            <summary>
            A user control to edit and build a SQL Server connection string.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.RaiseSqlSettingsChanged">
            <summary>
            Raises the SQL settings changed.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Data.VisualEditing.SqlConnectionStringEditor"/> class.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.UpdateControlValues">
            <summary>
            Updates the control values from the connection string. Automatically called when
            setting the ConnectionString property.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.SecurityModeChanged(System.Boolean)">
            <summary>
            Security mode changed.
            </summary>
            <param name="aIntegratedSecurity">if set to <c>true</c> [integrated security].</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.testConnectionButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the testConnectionButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.serverNameComboBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the serverNameComboBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.useWindowsAuthenticationRadioButton_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the useWindowsAuthenticationRadioButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.useSQLServerAuthenticationRadioButton_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the useSQLServerAuthenticationRadioButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.userNameTextBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the userNameTextBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.passwordTextBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the passwordTextBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.DatabaseAccessModeChanged(System.Boolean)">
            <summary>
            Database access mode changed.
            </summary>
            <param name="aUseInstance">if set to <c>true</c> [use instance].</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.selectDatabaseRadioButton_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the selectDatabaseRadioButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.attatchDatabaseRadioButton_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the attatchDatabaseRadioButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.attachFileTextBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the attachFileTextBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.logicalNameTextBox_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the TextChanged event of the logicalNameTextBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.advancedButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the advancedButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.refreshServerListButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the refreshServerListButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.databaseNameComboBox_DropDown(System.Object,System.EventArgs)">
            <summary>
            Handles the DropDown event of the databaseNameComboBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Isab.Data.VisualEditing.SqlConnectionStringEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlConnectionStringEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Isab.Data.VisualEditing.SqlConnectionStringEditor.SqlSettingsChanged">
            <summary>
            Occurs when [SQL settings changed].
            </summary>
        </member>
        <member name="P:Isab.Data.VisualEditing.SqlConnectionStringEditor.DatabaseScript">
            <summary>
            Script that will be used to create a new database structure (this script should not include CREATE DATABASE calls..)
            </summary>
        </member>
        <member name="P:Isab.Data.VisualEditing.SqlConnectionStringEditor.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="T:Isab.Data.VisualEditing.SqlServerComboBox">
            <summary>
            A ComboBox that retrives a list of near by SQL Servers and displays them
            when you open the list.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlServerComboBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Data.VisualEditing.SqlServerComboBox"/> class.
            </summary>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlServerComboBox.OnDropDown(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.ComboBox.DropDown"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlServerComboBox.bg_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Handles the DoWork event of the bg control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlServerComboBox.bg_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Handles the RunWorkerCompleted event of the bg control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Data.VisualEditing.SqlServerComboBox.RefreshServerList">
            <summary>
            Refreshes the server list.
            </summary>
        </member>
        <member name="M:Isab.ExtensionMethods.AssemblyExtensions.CreateInstance``1(System.Reflection.Assembly,System.String)">
            <summary>
            Creates an instance of a type and returns it in with the given returnType
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="aAssembly"></param>
            <param name="aTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.ExtensionMethods.AssemblyExtensions.GetResource(System.Reflection.Assembly,System.String)">
            <summary>
            Reads an embeded resource file from the provided assembly and returns it as a string
            </summary>
            <param name="aAssembly">Assembly to read resource from</param>
            <param name="aResourceName">Resource to read</param>
            <returns>Resourcefile as string</returns>
        </member>
        <member name="T:Isab.File.PathExt">
            <summary>
            Extends functionality found in System.IO.Path. 
            </summary>
            <!-- Author: Niklas Lagergren, 2005-04-22 -->
        </member>
        <member name="M:Isab.File.PathExt.GetFullPath(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Extends System.IO.Path.GetFullPath with the possability to resolve a relative path from
            the current running process path instead of the start up path. It also adds the option to
            always retrive the path with a trailing backslash ("\"). It also adds the option to make
            sure that the path that is returned exists.
            <seealso cref="M:System.IO.Path.GetFullPath(System.String)"/>
            </summary>
            <param name="aPath">The path to resolve</param>
            <param name="aResolveFromProcessPath">Current running process path used as base if true.
            									  Otherwise the start up path of the process is used.</param>
            <param name="aForceTrailingBackslash">If true the returning path is guranteed to end with
                                                  a trailng backslash "\".</param>
            <param name="aMakeSureDirectoryExists">If true the directory part of the path is
                                                   created if it doesn't exists.</param>
            <returns>The resolved path</returns>
            <remarks>Do not set aForceTrailingBackslash to true when a filename is included in the
            path, as it then will be treated as a directory and also created as such if 
            aMakeSureDirectoryExists is set to true.</remarks>
        </member>
        <member name="M:Isab.File.PathExt.GetFullPath(System.String,System.Boolean,System.Boolean)">
            <summary>
            Extends System.IO.Path.GetFullPath with the possability to resolve a relative path from
            the current running process path instead of the start up path. It also adds the option to
            always retrive the path with a trailing backslash ("\"). It also makes sure that the path 
            that is returned exists.
            <seealso cref="M:System.IO.Path.GetFullPath(System.String)"/>
            </summary>
            <param name="aPath">The path to resolve</param>
            <param name="aResolveFromProcessPath">Current running process path used as base if true.
            									  Otherwise the start up path of the process is used.</param>
            <param name="aForceTrailingBackslash">If true the returning path is guranteed to end with
                                                  a trailng backslash "\".</param>
            <returns>The resolved path</returns>
            <remarks>Do not set aForceTrailingBackslash to true when a filename is included in the
            path, as it then will be treated as a directory and also created as such.</remarks>
        </member>
        <member name="M:Isab.File.PathExt.GetFullPath(System.String,System.Boolean)">
            <summary>
            Extends System.IO.Path.GetFullPath with the possability to resolve a relative path from
            the current running process path instead of the start up path. It also makes sure that the
            retrived path ends with a trailing backslash ("\"). It also makes sure that the path 
            that is returned exists.
            <seealso cref="M:System.IO.Path.GetFullPath(System.String)"/>
            </summary>
            <param name="aPath">The path to resolve</param>
            <param name="aResolveFromProcessPath">Current running process path used as base if true.
            									  Otherwise the start up path of the process is used.</param>
            <returns>The resolved path</returns>
            <remarks>Do not call this function with a filename included in the
            path, as it then will be treated as a directory and also created as such.</remarks>
        </member>
        <member name="M:Isab.File.PathExt.GetFullPath(System.String)">
            <summary>
            Indiferent from the System.IO.Path.GetFullPath a relative path is resolved from
            the currently running process path instead of the start up path. It also makes sure that the
            retrived path ends with a trailing backslash ("\"). It also makes sure that the path 
            that is returned exists.
            <seealso cref="M:System.IO.Path.GetFullPath(System.String)"/>
            </summary>
            <param name="aPath">The path to resolve</param>
            <returns>The resolved path</returns>
            <remarks>Do not call this function with a filename included in the
            path, as it then will be treated as a directory and also created as such.</remarks>
        </member>
        <member name="T:Isab.Forms.AboutForm">
            <summary>
            Standard about form.
            </summary>
            <remarks>
            Builds the copyright notice from the executing assemblys company name,
            product name, file creation time and file change time.
            </remarks>
        </member>
        <member name="M:Isab.Forms.AboutForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AboutForm"/> class.
            </summary>
        </member>
        <member name="M:Isab.Forms.AboutForm.Display">
            <summary>
            Displays the AboutForm to the user.
            </summary>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
        </member>
        <member name="M:Isab.Forms.AboutForm.AboutForm_Load(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event of the AboutForm control. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="F:Isab.Forms.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Forms.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Forms.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Isab.Forms.AutoSaveStateForm">
            <summary>
            Stores the form settings of the inherited form in the local user 
            settings assosiated with the name of the form. The settings stored is 
            Location, Size and Window State. See <see cref="T:Isab.Forms.FormSettings"/> for 
            more information on how the settings are stored.
            </summary>
        </member>
        <member name="M:Isab.Forms.AutoSaveStateForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AutoSaveStateForm"/> class.
            </summary>
        </member>
        <member name="M:Isab.Forms.AutoSaveStateForm.LoadProperties">
            <summary>
            Loads the form properties.
            </summary>
        </member>
        <member name="M:Isab.Forms.AutoSaveStateForm.SaveProperties">
            <summary>
            Saves the form properties.
            </summary>
        </member>
        <member name="M:Isab.Forms.AutoSaveStateForm.AutoSaveStateForm_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            Handles the FormClosed event of the AutoSaveStateForm control.
            Saves the form properties.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.FormClosedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Forms.AutoSaveStateForm.AutoSaveStateForm_Load(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event of the AutoSaveStateForm control.
            Loades the form properties.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Isab.Forms.AutoSaveStateForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Forms.AutoSaveStateForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Forms.AutoSaveStateForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Isab.Forms.Controls.ToolStripInfo">
            <summary>
            The information to show in a ToolStripInfoLabel.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfo.None">
            <summary>
            No special information is displayed.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfo.CapsLock">
            <summary>
            The state of the CapsLock key is displayed.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfo.NumLock">
            <summary>
            The state of the NumLock key is displayed.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfo.ScrollLock">
            <summary>
            The state of the ScrollLock key is displayed.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfo.Insert">
            <summary>
            The state of the Insert key is displayed.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfo.Date">
            <summary>
            The system date is displayed.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfo.Time">
            <summary>
            The system time is displayed.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfo.DateAndTime">
            <summary>
            The system date and time is displayed.
            </summary>
        </member>
        <member name="T:Isab.Forms.Controls.ToolStripInfoLabel">
            <summary>
            An instance of this class can be added to the <see cref="T:System.Windows.Forms.StatusStrip"/> control. Adding
            the ability to show the status of the CAPS, NUM, SCRLK and INSERT keys and also the 
            current time and date.
            <remarks>This class uses the <see cref="T:System.ComponentModel.BackgroundWorker"/> class to create a background
            thread to monitor the state of the keys.</remarks>
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfoLabel.BG_LOOP_SLEEP">
            <summary>
            The number of milliseconds to sleep between checking the state
            of the keys.
            </summary>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.RegisterWithBackgroundWorker">
            <summary>
            Registers this object instance with the background worker's progress event.
            </summary>
            <remarks>The background worker will be created the first time this method is called.</remarks>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.bgWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Handles the RunWorkerCompleted event of the bgWorker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.UpdateText(Isab.Forms.Controls.ToolStripInfo,Isab.Forms.Controls.ToolStripInfoLabel.Info)">
            <summary>
            Updates the text of the control according to the showInfo argument.
            </summary>
            <param name="aShowInfo">The show info.</param>
            <param name="aInfo">The info.</param>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.bgWorker_ProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Handles the ProgressChanged event of the bgWorker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.bgWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Handles the DoWork event of the bgWorker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.ToolStripItem"></see> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.#ctor">
            <summary>
            Initializes a new instance of the ToolStripInfoLabel
            class.
            </summary>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Forms.Controls.ToolStripInfoLabel"/> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ToolStripStatusLabel
            class that displays the specified text.
            </summary>
            <param name="text">A System.String representing the text to be 
            displayed on the ToolStripInfoLabel.</param>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the ToolStripInfoLabel
            class that displays the specified image and text.
            </summary>
            <param name="text">A System.String representing the text to be 
            displayed on the ToolStripInfoLabel.</param>
            <param name="image">An System.Drawing.Image that is displayed on 
            the ToolStripInfoLabel.</param>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.#ctor(System.String,System.Drawing.Image,System.EventHandler)">
            <summary>
            Initializes a new instance of the ToolStripInfoLabel
            class that displays the specified image and text, and that carries 
            out the specified action when the user clicks the 
            ToolStripInfoLabel.
            </summary>
            <param name="text">A System.String representing the text to be 
            displayed on the ToolStripInfoLabel.</param>
            <param name="image">An System.Drawing.Image that is displayed on 
            the ToolStripInfoLabel.</param>
            <param name="onClick">Specifies the action to carry out when the 
            control is clicked.</param>
        </member>
        <member name="M:Isab.Forms.Controls.ToolStripInfoLabel.#ctor(System.String,System.Drawing.Image,System.EventHandler,System.String)">
            <summary>
            Initializes a new instance of the ToolStripInfoLabel
            class with the specified name that displays the specified image and
            text,and that carries out the specified action when the user clicks 
            the ToolStripInfoLabel.
            </summary>
            <param name="text">A <see cref="T:System.String"></see> representing 
            the text to be displayed on the 
            <see cref="T:ToolStripInfoLabel"></see>.</param>
            <param name="image">An <see cref="T:System.Drawing.Image"></see> 
            that is displayed on the 
            <see cref="T:ToolStripStatusLabel"></see>.</param>
            <param name="onClick">Specifies the action to carry out when the 
            control is clicked.</param>
            <param name="name">The name of the 
            <see cref="T:ToolStripInfoLabel"></see>.</param>
        </member>
        <member name="P:Isab.Forms.Controls.ToolStripInfoLabel.Text">
            <summary>
            Gets the text that is to be displayed on the item. 
            </summary>
            <value>The value is ignored.</value>
            <returns>A string representing the item's text. The default value is the empty string ("").</returns>
            <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/></PermissionSet>
            <remarks>The text that is set is ignored. The ShowInfo property is used to determine 
            what should be displayed.</remarks>
        </member>
        <member name="P:Isab.Forms.Controls.ToolStripInfoLabel.ShowInfo">
            <summary>
            Gets or sets what information what should be displayed.
            </summary>
            <value>The type of information to display.</value>
        </member>
        <member name="T:Isab.Forms.Controls.ToolStripInfoLabel.Info">
            <summary>
            Hold the last status of the keys that are being monitored.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfoLabel.Info.NumLock">
            <summary>
            Holds the state of the NumLock key.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfoLabel.Info.CapsLock">
            <summary>
            Holds the state of the CapsLock key.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfoLabel.Info.ScrollLock">
            <summary>
            Holds the state of the ScrollLock key.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfoLabel.Info.Insert">
            <summary>
            Holds the state of the Insert key.
            </summary>
        </member>
        <member name="F:Isab.Forms.Controls.ToolStripInfoLabel.Info.DateAndTime">
            <summary>
            Holds the systems current date and time.
            </summary>
        </member>
        <member name="T:Isab.Forms.DropShadowForm">
            <summary>
            A form that drops a shadow around its edges. 
            </summary>
            <remarks>Requiers Windows XP or above to work.</remarks>
        </member>
        <member name="M:Isab.Forms.DropShadowForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DropShadowForm"/> class.
            </summary>
        </member>
        <member name="F:Isab.Forms.DropShadowForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Forms.DropShadowForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Forms.DropShadowForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Isab.Forms.DropShadowForm.CreateParams">
            <summary>
            Gets the create params.
            </summary>
            <value>The create params.</value>
        </member>
        <member name="P:Isab.Forms.DropShadowForm.IsDropShadowSupported">
            <summary>
            Gets a value indicating whether drop shadow supported.
            </summary>
            <value>
            	<c>true</c> if drop shadow supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Isab.Forms.DropShadowForm.IsWindowsXPOrAbove">
            <summary>
            Gets a value indicating if Windows XP or above is running.
            </summary>
            <value>
            	<c>true</c> if Windows XP or above; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Isab.Forms.ExceptionDialog">
            <summary>
            Displays exception information.
            </summary>
        </member>
        <member name="M:Isab.Forms.ExceptionDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Forms.ExceptionDialog"/> class.
            </summary>
        </member>
        <member name="M:Isab.Forms.ExceptionDialog.SetDialogException(System.Exception)">
            <summary>
            Sets the dialog exception.
            </summary>
            <param name="aException">The exception.</param>
        </member>
        <member name="M:Isab.Forms.ExceptionDialog.Display(System.Exception)">
            <summary>
            Displays the specified exception.
            </summary>
            <param name="aException">The exception.</param>
        </member>
        <member name="M:Isab.Forms.ExceptionDialog.Display(System.Windows.Forms.Form,System.Exception)">
            <summary>
            Displays the specified exception.
            </summary>
            <param name="aException">The exception.</param>
        </member>
        <member name="M:Isab.Forms.ExceptionDialog.Display(System.Exception,Isab.Log.ILog)">
            <summary>
            Displays the specified exception.
            </summary>
            <param name="aException">The exception.</param>
            <param name="aLog">An <see cref="T:Isab.Log.ILog"/> object used for logging the exception.</param>
        </member>
        <member name="M:Isab.Forms.ExceptionDialog.Display(System.Exception,Isab.Log.ILog,Isab.Language.ILanguageManager)">
            <summary>
            Displays the specified exception.
            </summary>
            <param name="aException">The exception.</param>
            <param name="aLog">An <see cref="T:Isab.Log.ILog"/> object used for logging the exception.</param>
        </member>
        <member name="M:Isab.Forms.ExceptionDialog.Display(System.Windows.Forms.Form,System.Exception,Isab.Log.ILog,Isab.Language.ILanguageManager)">
            <summary>
            Displays the specified exception.
            </summary>
        </member>
        <member name="F:Isab.Forms.ExceptionDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Forms.ExceptionDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Forms.ExceptionDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Isab.Forms.FormSettings">
            <summary>
            Stores form settings data in the local user settings assosiated with 
            the name of the form passed to the constructor. See 
            <see cref="T:System.Configuration.ApplicationSettingsBase"/> for more information on how 
            the settings are stored.
            </summary>
            <remarks>The original form values are used if no user settings can be
            found for the given form.</remarks>
        </member>
        <member name="M:Isab.Forms.FormSettings.#ctor(System.String,System.Drawing.Size,System.Drawing.Point,System.Windows.Forms.FormWindowState)">
            <summary>
            Initializes a new instance of the <see cref="T:FormSettings"/> class.
            </summary>
            <param name="aFormName">A settings key used to separate the settings for different
            instances of this class. The name of the form using the class is a good value to use.
            </param>
            <param name="aDefaultSize">The default size of the form.</param>
            <param name="aDefaultLocation">The default location of the form.</param>
            <param name="aDefaultWindowState">The default window state of the form.</param>
            <exception cref="T:System.ArgumentNullException">The ArgumentNullException is thrown if
            the aFormName parameter is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The ArgumentOutOfRangeException is
            thrown if aFormName is empty.</exception>
            <remarks>The default parameters are used as values if no settings for the
            given form name can be found.</remarks>
        </member>
        <member name="P:Isab.Forms.FormSettings.Location">
            <summary>
            Gets or sets the form location.
            </summary>
            <value>The location of the form.</value>
        </member>
        <member name="P:Isab.Forms.FormSettings.WindowState">
            <summary>
            Gets or sets the state of the window.
            </summary>
            <value>The state of the window.</value>
        </member>
        <member name="P:Isab.Forms.FormSettings.Size">
            <summary>
            Gets or sets the form size.
            </summary>
            <value>The form size.</value>
        </member>
        <member name="T:Isab.Forms.Hourglass">
            <summary>
            A class that sets the mouse pointer to hourglass when it's initialized
            and saves the current mouse pointer. The mouse pointer is restored to
            it's previous state when the class is disposed.
            <remarks>Initial version by Niklas Lagergren.</remarks>
            </summary>
            <example>
            This example will show an hourglass cursor while the code between the
            start and end brackets are executing:
            <code>
            using(Hourglass sHourglass = new Hourglass())
            {
            	// Work some magic!
            }
            </code>
            </example>
        </member>
        <member name="M:Isab.Forms.Hourglass.#ctor">
            <summary>
            Saves the current cursor and sets the current cursor to the hourglass pointer.
            </summary>
        </member>
        <member name="M:Isab.Forms.Hourglass.Dispose(System.Boolean)">
            <summary>
            Restores the current cursor to the cursor that were the current cursor when 
            the class was created, but only if disposing is true.
            </summary>
        </member>
        <member name="M:Isab.Forms.Hourglass.Dispose">
            <summary>
            Restores the current cursor to the cursor that were the current cursor when 
            the class was created.
            </summary>       
        </member>
        <member name="T:Isab.Forms.InputBox">
            <summary>
            A simple input box to query the user for string data.
            </summary>
        </member>
        <member name="M:Isab.Forms.InputBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Shows a simple input box to query the user for string data.
            </summary>
            <param name="aOwner">The owner window.</param>
            <param name="aTitle">The title.</param>
            <param name="aPrompt">The prompt.</param>
            <param name="aMaxInputLength">The maximum length of the input.</param>
            <param name="aRequired">The user must enter a value if set to <c>true</c>.</param>
            <param name="aDefault">A default.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Forms.InputBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Forms.InputBox"/> class.
            </summary>
        </member>
        <member name="M:Isab.Forms.InputBox.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the okButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Isab.Forms.InputBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Forms.InputBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Forms.InputBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Isab.Forms.IsabProgram">
            <summary>
            Isab program functions to run an application with a splash screen and as 
            a single process instance.
            </summary>
        </member>
        <member name="F:Isab.Forms.IsabProgram.LOG_CATEGORY">
            <summary>
            Default category that this class uses when logging messages.
            </summary>
        </member>
        <member name="M:Isab.Forms.IsabProgram.Run(System.Type)">
            <summary>
            Runs the applications showing a splashscreen and the specified a main form.
            </summary>
            <param name="aMainForm">A main form.</param>
        </member>
        <member name="M:Isab.Forms.IsabProgram.Restart">
            <summary>
            Restarts the application.
            </summary>
            <remarks>Tries to first release </remarks>
        </member>
        <member name="M:Isab.Forms.IsabProgram.mainForm_Shown(System.Object,System.EventArgs)">
            <summary>
            Handles the Shown event of the MainForm form. Refreshes the form
            to make sure that it is drawn after the splash screen is shown.
            Also closes the splash screen as the loading is done now.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance 
            containing the event data.</param>
        </member>
        <member name="M:Isab.Forms.IsabProgram.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Handles the UnhandledException event of the CurrentDomain control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Forms.IsabProgram.Application_ThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Handles the ThreadException event of the Application control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Threading.ThreadExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Isab.Forms.IsabProgram.Log">
            <summary>
            Gets or sets the log object used by this class when logging.
            </summary>
            <value>The log object.</value>
        </member>
        <member name="P:Isab.Forms.IsabProgram.LanguageMng">
            <summary>
            Gets or sets the languagemanager object used by this class.
            </summary>
        </member>
        <member name="P:Isab.Forms.IsabProgram.ProcessScope">
            <summary>
            Gets or sets the process scope.
            </summary>
            <value>The process scope. The default value is 
            <see cref="F:Isab.Forms.SingleProcess.SingleProcessScope.Local"/>.</value>
            <seealso cref="T:Isab.Forms.SingleProcess.SingleProcessInstance"/>
        </member>
        <member name="P:Isab.Forms.IsabProgram.MainForm">
            <summary>
            Gets the main form instance passed to IsabProgram.Run.
            </summary>
            <value>The main form.</value>
        </member>
        <member name="P:Isab.Forms.IsabProgram.ProcessAction">
            <summary>
            Gets or sets the process action.
            </summary>
            <value>The process action. The default value is
            <see cref="F:Isab.Forms.SingleProcess.SingleProcessAction.SwitchToFirstInstance"/>.</value>
            <seealso cref="T:Isab.Forms.SingleProcess.SingleProcessInstance"/>
        </member>
        <member name="P:Isab.Forms.IsabProgram.SplashMinDisplay">
            <summary>
            Gets or sets the minimum display time of the splash screen.
            </summary>
            <value>The splash screen minimum display time in milliseconds.
            The default value is 2000 milliseconds.</value>
            <seealso cref="T:Isab.Forms.SplashScreenForm"/>
        </member>
        <member name="P:Isab.Forms.IsabProgram.ShowSplashScreen">
            <summary>
            Gets or sets a value indicating whether to show the splash screen or not.
            </summary>
            <value><c>true</c> shows the splash screen; otherwise it doesn't, <c>false</c>.</value>
        </member>
        <member name="F:Isab.Forms.MessageDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Forms.MessageDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Forms.MessageDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Isab.Forms.Process">
            <summary>
            Gathers useful methods that can be used to manipulate a running process.
            </summary>
        </member>
        <member name="M:Isab.Forms.Process.BringMainWindowToFront">
            <summary>
            Brings the main window of the current running process to front.
            </summary>
        </member>
        <member name="M:Isab.Forms.Process.BringMainWindowToFront(System.Diagnostics.Process)">
            <summary>
            Brings the main window of the given process to front.
            </summary>
            <param name="process">The process.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the process
            parameter passed is <c>null</c>.</exception>
        </member>
        <member name="T:Isab.Forms.PropertyGridDialog">
            <summary>
            A dialog that displays a property grid. Used to edit an object using the property grid in 
            a separate dialog.
            </summary>
        </member>
        <member name="M:Isab.Forms.PropertyGridDialog.Display(System.Windows.Forms.IWin32Window,System.Object@)">
            <summary>
            Displays the property grid dialog with the specified object as the selected object of 
            the property grid.
            </summary>
            <param name="aOwner">The owner of the window.</param>
            <param name="aObject">The object to display in the property grid.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Forms.PropertyGridDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Forms.PropertyGridDialog"/> class.
            </summary>
        </member>
        <member name="M:Isab.Forms.PropertyGridDialog.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the cancelButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Forms.PropertyGridDialog.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the okButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Isab.Forms.PropertyGridDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Forms.PropertyGridDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Forms.PropertyGridDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Isab.Forms.PropertyGridDialog.SelectedObject">
            <summary>
            Gets or sets the selected object of the property grid.
            </summary>
            <value>The selected object of the propery grid.</value>
        </member>
        <member name="T:Isab.Forms.SingleProcess.SingleProcessAction">
            <summary>
            Specifies what action that should be taken with an already running instance.
            </summary>
        </member>
        <member name="F:Isab.Forms.SingleProcess.SingleProcessAction.None">
            <summary>
            No action is taken with the already running application instance.
            </summary>
        </member>
        <member name="F:Isab.Forms.SingleProcess.SingleProcessAction.SwitchToFirstInstance">
            <summary>
            The already running application instance main window is shown.
            </summary>
        </member>
        <member name="T:Isab.Forms.SingleProcess.SingleProcessInstance">
            <summary>
            A class used to check if a another process of the same code base
            is already running. It is possible to check against the
            current Terminal Services session only, or against all logged in 
            sessions. 
            </summary>
            <remarks>A mutex is used to check against other processes.</remarks>
        </member>
        <member name="F:Isab.Forms.SingleProcess.SingleProcessInstance.GLOBAL_STOP_MESSAGE">
            <summary>
            The message that is shown when another process that isn't 
            allowed is found in another Terminal Services session.
            </summary>
        </member>
        <member name="M:Isab.Forms.SingleProcess.SingleProcessInstance.#ctor(Isab.Forms.SingleProcess.SingleProcessScope,Isab.Forms.SingleProcess.SingleProcessAction)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:SingleProcessInstance"/> class.
            </summary>
            <param name="scope">The scope to work within.</param>
            <param name="action">The action to take when another process is 
            found.</param>
        </member>
        <member name="M:Isab.Forms.SingleProcess.SingleProcessInstance.InternalConstructor(Isab.Forms.SingleProcess.SingleProcessScope,Isab.Forms.SingleProcess.SingleProcessAction)">
            <summary>
            Initializes the SingleProcessClass instance. Creates a mutex and
            executes the logic according to the given scope and action.
            </summary>
            <param name="scope">The scope to limit process execution within.</param>
            <param name="action">The action to take when another running process is found.</param>
        </member>
        <member name="M:Isab.Forms.SingleProcess.SingleProcessInstance.GetMutexName(Isab.Forms.SingleProcess.SingleProcessScope)">
            <summary>
            Creates a valid mutex name with Global or Local scope prefix.
            </summary>
            <param name="scope">The scope to work within.</param>
            <returns>The name to assosiate with the mutex.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the
            application name of the calling code contains a backslash.</exception>
        </member>
        <member name="M:Isab.Forms.SingleProcess.SingleProcessInstance.GetOtherProcess">
            <summary>
            Gets the already running process name for the current session.
            </summary>
            <returns>The <see cref="T:System.Diagnostics.Process"/> of the 
            already running process.
            <c>null</c> is returned if no process is found.</returns>
        </member>
        <member name="M:Isab.Forms.SingleProcess.SingleProcessInstance.ShowProcess(System.Diagnostics.Process)">
            <summary>
            Brings the given process main window to the front.
            </summary>
            <param name="process">The process.</param>
        </member>
        <member name="M:Isab.Forms.SingleProcess.SingleProcessInstance.Dispose">
            <summary>
            Disposes of any managed and unmanaged resources used by this object instance.
            </summary>
        </member>
        <member name="M:Isab.Forms.SingleProcess.SingleProcessInstance.Dispose(System.Boolean)">
            <summary>
            Disposes managed and/or unmanaged resources based on the disposing parameter.
            </summary>
            <param name="disposing">If true both managed and unmanaged resources are disposed, otherwise
            only unmanaged resources are disposed.</param>
        </member>
        <member name="M:Isab.Forms.SingleProcess.SingleProcessInstance.Release">
            <summary>
            Releases the mutex hold by this instance.
            </summary>
        </member>
        <member name="M:Isab.Forms.SingleProcess.SingleProcessInstance.Finalize">
            <summary>
            Finalizer to dispose of any unmanaged resources in case the user of this class
            forgot to call the dispose method.
            </summary>
        </member>
        <member name="P:Isab.Forms.SingleProcess.SingleProcessInstance.AllowExecution">
            <summary>
            Gets a value indicating whether execution should be allowed.
            </summary>
            <value><c>true</c> if execution should be allowed; otherwise, 
            <c>false</c>.</value>
        </member>
        <member name="T:Isab.Forms.SingleProcess.SingleProcessScope">
            <summary>
            Indicates the scope for a single process application.
            </summary>
        </member>
        <member name="F:Isab.Forms.SingleProcess.SingleProcessScope.None">
            <summary>
            Allow the application to run in multiple instances.
            </summary>
        </member>
        <member name="F:Isab.Forms.SingleProcess.SingleProcessScope.Local">
            <summary>
            Allow only one instance of the application per user session.
            </summary>
        </member>
        <member name="F:Isab.Forms.SingleProcess.SingleProcessScope.Global">
            <summary>
            Allow only one instance of the application across user sessions.
            </summary>
        </member>
        <member name="T:Isab.Forms.SplashScreenForm">
            <summary>
            Consafe Logistics splash screen form with static methods to interact with the splash screen.
            </summary>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.SetVisibleByDelegate(System.Boolean)">
            <summary>
            Sets the visible value of the current SplashScreenForm
            </summary>
            <param name="aValue"></param>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.SetVisible(System.Boolean)">
            <summary>
            Sets the visible value of the current SplashScreenForm
            </summary>
            <param name="aVisible"></param>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SplashScreenForm"/> class.
            </summary>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.AddMessageByDelegate(System.String)">
            <summary>
            Adds the message to the displayed list, called by a delegate.
            </summary>
            <param name="message">The message to add.</param>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.AddMessage(System.String)">
            <summary>
            Adds the message to the displayed message list.
            </summary>
            <param name="message">The message to add.</param>
            <exception cref="T:System.ArgumentNullException">Is thrown if no message is supplied when 
            calling this method.</exception>
            <exception cref="T:System.InvalidOperationException">Is thrown if the splash screen hasn't 
            been shown using the ShowSplashScreen() method before calling this method.</exception>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.ShowSplashScreen(System.Double)">
            <summary>
            Creates a new SplashScreenForm instance and shows it in a separate background thread.
            The miniumum display time of the splash screen are also set to the 
            </summary>
            <param name="minDisplayTime">The min display time.</param>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.ShowSplashScreen">
            <summary>
            Creates a new SplashScreenForm instance and shows it in a separate background thread.
            </summary>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.bgWorker_RunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Handles the RunWorkerCompleted event of the bgWorker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.bgWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Handles the DoWork event of the bgWorker control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.ShowForm(System.ComponentModel.BackgroundWorker)">
            <summary>
            Creates and show an instance of this form and loops untill it should close, then
            closes it.
            </summary>
            <param name="bgw">The BackgrundWorker used to display the form within.</param>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.CloseSplashScreen">
            <summary>
            Closes the splash screen form.
            </summary>
        </member>
        <member name="F:Isab.Forms.SplashScreenForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Forms.SplashScreenForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Isab.Forms.SplashScreenForm.IsSplashScreenVisible">
            <summary>
            True if the splashscreen is currently visible
            </summary>
        </member>
        <member name="P:Isab.Forms.SplashScreenForm.ProductName">
            <summary>
            Gets or sets the product name displayed.
            </summary>
            <remarks>The defautlt is application product name followed by the major and minor version.</remarks>
            <value>The product name</value>
            <returns>The product name.</returns>
        </member>
        <member name="P:Isab.Forms.SplashScreenForm.CopyrightNotice">
            <summary>
            Gets or sets the copyright notice.
            </summary>
            <remarks>The default value is "Copyrright © [CompanyName] 2006" where [CompanyName]
            is the company name defined in the application assembly.</remarks>
            <value>The copyright notice.</value>
        </member>
        <member name="P:Isab.Forms.SplashScreenForm.MinDisplayTime">
            <summary>
            Gets or sets the minimum display time of the splash screen. 
            </summary>
            <value>The minimum display time in milliseconds.</value>
        </member>
        <member name="M:Isab.IO.Scanner.Scanner`1.NewChar(System.Char)">
            <summary>
            Register a new char from the scanner
            </summary>
            <param name="aNewChar"></param>
        </member>
        <member name="M:Isab.IO.Scanner.Scanner`1.EndRead">
            <summary>
            Ends a read cycle and handles data that is still buffered
            </summary>
        </member>
        <member name="M:Isab.IO.Scanner.Scanner`1.WriteToLog(System.String,Isab.Log.LogLevelsEnum)">
            <summary>
            Writes a message to the log file with the category "SCANNER"
            </summary>
            <param name="aMsg"></param>
            <param name="aLevel"></param>
        </member>
        <member name="M:Isab.IO.Scanner.Scanner`1.WriteToLog(System.String,Isab.Log.LogLevelsEnum,System.Exception)">
            <summary>
            Writes a message to the log file with the category "SCANNER"
            </summary>
            <param name="aMsg"></param>
            <param name="aLevel"></param>
            <param name="aException">Exception to log</param>
        </member>
        <member name="M:Isab.IO.Scanner.IPScanner.Write(System.Byte[])">
            <summary>
            Write data to the scanner
            </summary>
            <param name="aByteList"></param>
        </member>
        <member name="T:Isab.IO.Scanner.KeyboardFilter">
            <summary>
            Class for filtering out keyboard events that is passed to one of
            the applications windowses.
            </summary>
        </member>
        <member name="M:Isab.IO.Scanner.Settings.ScannerConfiguration.GetValue(System.String)">
            <summary>
            Retrives a value from the value list
            </summary>
            <param name="aName"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.IO.Scanner.Settings.ScannerConfiguration.SetValue(System.String,System.Object)">
            <summary>
            Sets a value to the value list
            </summary>
            <param name="aName"></param>
            <param name="aValue"></param>
        </member>
        <member name="M:Isab.IO.Scanner.SerialScanner.Write(System.Byte[])">
            <summary>
            Write data to the scanner
            </summary>
            <param name="aByteList"></param>
        </member>
        <member name="T:Isab.IO.Scanner.ScannerDataParser">
            <summary>
            Parses scannerdata from a string based on its start and stop chars
            </summary>
        </member>
        <member name="M:Isab.IO.Scanner.ScannerDataParser.Reset">
            <summary>
            Resets the parsers data
            </summary>
        </member>
        <member name="P:Isab.IO.Scanner.ScannerDataParser.ParserResult.Data">
            <summary>
            Blank if no completestring
            </summary>
        </member>
        <member name="P:Isab.IO.Scanner.ScannerDataParser.ParserResult.CharWasHandled">
            <summary>
            True if the current char was buffered as scannerdata
            </summary>
        </member>
        <member name="P:Isab.IO.Scanner.ScannerDataParser.ParserResult.CompleteStringFound">
            <summary>
            True if a complete string was found
            </summary>
        </member>
        <member name="M:Isab.Language.Data.DataSourceFactory.Create(Isab.Language.SourceType,System.Windows.Forms.IWin32Window)">
            <summary>
            Creates a datasource, if the datasource requires input data the user
            will be asked to enter it
            </summary>
            <param name="aType"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Language.LoadLanguageException.#ctor(System.String,System.Exception)">
            <summary>
            Exception that is thrown when there is an error loading the language system
            </summary>
            <param name="aMsg">Short description of the error</param>
            <param name="aInnerException">The actual exception that has occured</param>
        </member>
        <member name="M:Isab.Language.LoadLanguageException.#ctor(System.String)">
            <summary>
            Exception that is thrown when there is an error loading the language system
            </summary>
            <param name="aMsg">Error description</param>
        </member>
        <member name="F:Isab.Language.VirtualEditing.AssemblyTreeView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Language.VirtualEditing.AssemblyTreeView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Language.VirtualEditing.AssemblyTreeView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Isab.Language.VirtualEditing.AssemblyTreeView.Source">
            <summary>
            The datasource that is to be displayed
            </summary>
        </member>
        <member name="F:Isab.Language.EditLanguageControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Language.EditLanguageControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Language.EditLanguageControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Isab.Language.EditLanguageControl.ShowBtnOpen">
            <summary>
            True if the Open button should be visible
            </summary>
        </member>
        <member name="P:Isab.Language.EditLanguageControl.ShowBtnSave">
            <summary>
            True if the Open button should be visible
            </summary>
        </member>
        <member name="F:Isab.Language.VirtualEditing.InputDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Language.VirtualEditing.InputDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Language.VirtualEditing.InputDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Language.VirtualEditing.ManageLngDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Language.VirtualEditing.ManageLngDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Language.VirtualEditing.ManageLngDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Isab.Language.VirtualEditing.PhraseDataGridView.EndEdit">
            <summary>
            If the user is currently editing any value... this will end the edit and
            commit the changes
            </summary>
        </member>
        <member name="F:Isab.Language.VirtualEditing.PhraseDataGridView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Language.VirtualEditing.PhraseDataGridView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Language.VirtualEditing.PhraseDataGridView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Isab.Language.VirtualEditing.SelectLanguageDialog.GetSelectedLanguages">
            <summary>
            Returns the selected items
            </summary>
            <returns></returns>
        </member>
        <member name="F:Isab.Language.VirtualEditing.SelectLanguageDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Language.VirtualEditing.SelectLanguageDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Language.VirtualEditing.SelectLanguageDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Isab.Language.LanguageManager">
            <summary>
            Language manages strings and controls
            </summary>
        </member>
        <member name="M:Isab.Language.LanguageManager.GetLanguages">
            <summary>
            Returns the currently defined languages in the manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.Language.LanguageManager.Load(Isab.Language.SourceType,System.String)">
            <summary>
            Loads the language data from the provided sourcetype and location
            </summary>
            <param name="aSourceType"></param>
            <param name="aSourceLocation"></param>
        </member>
        <member name="M:Isab.Language.LanguageManager.Save(System.Text.Encoding)">
            <summary>
            Saves the language section
            </summary>
        </member>
        <member name="M:Isab.Language.LanguageManager.M(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Main method for phrase management
            </summary>
        </member>
        <member name="M:Isab.Language.LanguageManager.GetAssemblyName(System.Windows.Forms.Form)">
            <summary>
            Returns the assembly name for the provided form
            </summary>
            <param name="aForm"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Language.LanguageManager.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Returns the assembly name for the provided assembly
            </summary>
            <param name="aForm"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Language.LanguageManager.ValidateInit">
            <summary>
            Validates if the manager has bin initilized correctly
            </summary>
        </member>
        <member name="M:Isab.Language.LanguageManager.IsLngManageable(System.Object)">
            <summary>
            Verifys if the provided control is langange manageable
            </summary>
            <param name="aControl"></param>
            <returns></returns>
        </member>
        <member name="P:Isab.Language.LanguageManager.IsUpdated">
            <summary>
            True if the language file has bin updated since last save
            </summary>
        </member>
        <member name="P:Isab.Language.LanguageManager.Language">
            <summary>
            The default language that should be used
            </summary>
        </member>
        <member name="P:Isab.Language.LanguageManager.CanUpdateExistingPhrases">
            <summary>
            If true the class will overwrite the phrases in the selected language.
            Use this if you want to generate a new file or overwrite an old language.
            </summary>
        </member>
        <member name="P:Isab.Language.LanguageManager.Source">
            <summary>
            The source of the language data
            </summary>
        </member>
        <member name="P:Isab.Language.LanguageManager.IsLoaded">
            <summary>
            True if a language source has been loaded..
            If it has not the user can still use the class
            but the class will only return the same phrases 
            as it is given
            </summary>
        </member>
        <member name="P:Isab.Language.Settings.AssemblyCollection.Item(System.String)">
            <summary>
            Retrives a container based on its name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Isab.Language.Settings.ContainerCollection.Item(System.String)">
            <summary>
            Retrives a container based on its name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Language.Settings.LanguageCollection.Contains(System.String)">
            <summary>
            True if the collection contains the given language
            </summary>
            <param name="aLanguage"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Language.Settings.LngMngSection.SerializeToXmlElement(System.Xml.XmlWriter,System.String)">
            <summary>
            Serializes the section into an XmlWriter
            </summary>
            <param name="aWriter"></param>
            <param name="aElementName"></param>
        </member>
        <member name="M:Isab.Language.Settings.LngMngSection.DeserializeSection(System.Xml.XmlReader)">
            <summary>
            Deserialize a section from a XmlReader
            </summary>
            <param name="aReader"></param>
        </member>
        <member name="P:Isab.Language.TranslateAttribute.Translate">
            <summary>
            Should the value be translated
            </summary>
        </member>
        <member name="T:Isab.Log.CategoriesElement">
            <summary>
            A collection of <see cref="T:Isab.Log.CategoryElement"/>s.
            </summary>
            <!-- Author: Niklas Lagergren, 2007-06-28 -->
        </member>
        <member name="M:Isab.Log.CategoriesElement.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="aKey">The key to check.</param>
            <returns>
            	<c>true</c> if the specified key is found withing the collection;
                otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Isab.Log.CategoriesElement.CreateNewElement">
            <summary>
            Creates a new 
            <see cref="T:System.Configuration.ConfigurationElement"></see>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement">
            </see>.
            </returns>
        </member>
        <member name="M:Isab.Log.CategoriesElement.GetElementKey(Isab.Log.CategoryElement)">
            <summary>
            Gets the element key for the specified configuration element.
            </summary>
            <param name="element">The 
            <see cref="T:System.Configuration.ConfigurationElement"></see> to 
            return the key for.</param>
            <returns>
            An <see cref="T:System.Object"></see> that acts as the key for the 
            specified <see cref="T:System.Configuration.ConfigurationElement">
            </see>.
            </returns>
        </member>
        <member name="M:Isab.Log.CategoriesElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Isab.Log.CategoriesElement.Item(System.String)">
            <summary>
            Gets the <see cref="T:Isab.Log.CategoryElement"/> with the specified 
            name.
            </summary>
            <value>The <see cref="T:Isab.Log.CategoryElement"/>.</value>
        </member>
        <member name="T:Isab.Log.CategoryElement">
            <summary>
            Represents a category.
            </summary>
            <!-- Author: Niklas Lagergren, 2007-06-28 -->
        </member>
        <member name="M:Isab.Log.CategoryElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the 
            current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current 
            <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Isab.Log.CategoryElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>The name must not contain "+" or ";". It must also be 
            between 1 to 20 characters in length.</remarks>
            <value>The name.</value>
        </member>
        <member name="P:Isab.Log.CategoryElement.Active">
            <summary>
            Gets or sets a value indicating whether this 
            <see cref="T:Isab.Log.CategoryElement"/> is active. If active the category 
            will be logged.
            </summary>
            <remarks>The default is true.</remarks>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Isab.Log.FileDestination">
            <summary>
            Writes log entries to file.
            </summary>
            <remarks>Do not create two instances of this class with the same log path
            and the same suffix; as they then will try to write to the same file, which 
            would make it possible for a file lock error to occur.</remarks>
        </member>
        <member name="F:Isab.Log.FileDestination.LOG_FILE_EXTENTION">
            <summary>
            The file extention used when creating log files.
            </summary>
        </member>
        <member name="F:Isab.Log.FileDestination.mHeader">
            <summary>
            Header information logged with every new log file.
            </summary>
            <remarks>
            The availible header entries are: "Filename""Log assembly", "Entry assembly", 
            "Log settings", "Log columns". If this class is inherited and the class adds
            new fields that are beeing logged, then the "Log columns" entry should be 
            updated to include the new field name. The field names are separated with semikolon (;).
            </remarks>
        </member>
        <member name="M:Isab.Log.FileDestination.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Log.FileDestination"/> class.
            </summary>
        </member>
        <member name="M:Isab.Log.FileDestination.CheckDisposed">
            <summary>
            Checks if the object is disposed and if so throw an ObjectDisposedException.
            </summary>
        </member>
        <member name="M:Isab.Log.FileDestination.DeleteOldLogFiles">
            <summary>
            Deletes logfiles older than the number of days to keep files 
            specified in the settings, or the oldest files if the total
            log size exceeds the maximum log file size.
            </summary>
        </member>
        <member name="M:Isab.Log.FileDestination.GetFileName">
            <summary>
            Gets the name of the file.
            </summary>
            <returns>The file name to log to.</returns>
        </member>
        <member name="M:Isab.Log.FileDestination.GetFileIndex(System.String)">
            <summary>
            Gets the index of the file.
            </summary>
            <param name="baseFileNameWithoutExtention">The base log file name without extention.
            </param>
            <returns>The file index to use in the file name.</returns>
        </member>
        <member name="M:Isab.Log.FileDestination.IsMaxFileSizeReached(System.String)">
            <summary>
            Determines whether the specified file's maximum size is reached.
            </summary>
            <param name="aFullPath">The path to the file to check..</param>
            <returns>
            	<c>true</c> if the file's maximum size is reached; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Isab.Log.FileDestination.GetFileSize(System.String)">
            <summary>
            Gets the size of the file.
            </summary>
            <param name="aFullPath">A full path.</param>
            <returns>The size of the specified file. 0 is returned if the file 
            cannot be found.</returns>
        </member>
        <member name="M:Isab.Log.FileDestination.IsCurrentMaxFileSizeReached">
            <summary>
            Determines whether max file size is reached for the current file.
            </summary>
            <returns>
            	<c>true</c> if the max file size is reached for the current file; otherwise, 
            <c>false</c>.
            </returns>
        </member>
        <member name="M:Isab.Log.FileDestination.MakeNewFileIfNeeded">
            <summary>
            Checks if it's a new day and if so closes the current logfile and opens a new one.
            </summary>
        </member>
        <member name="M:Isab.Log.FileDestination.Close">
            <summary>
            Checks if a logfile is open and then closes it if that was the case.
            </summary>
        </member>
        <member name="M:Isab.Log.FileDestination.Open">
            <summary>
            Opens a logfile with the name of todays date, eventual module name and 
            the extention log (ie yyyyMMdd.mymodule.log).
            </summary>
        </member>
        <member name="M:Isab.Log.FileDestination.Dispose">
            <summary>
            Closes the log file and removes any references made to external streams.
            </summary>       
        </member>
        <member name="M:Isab.Log.FileDestination.Dispose(System.Boolean)">
            <summary>
            Closes the log file and removes any references made to external streams.
            </summary>       
        </member>
        <member name="M:Isab.Log.FileDestination.Finalize">
            <summary>
            Finalizer to make sure that dispose is called.
            </summary>
        </member>
        <member name="F:Isab.Log.Settings.LogDestinationElementEditDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Log.Settings.LogDestinationElementEditDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Log.Settings.LogDestinationElementEditDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.Log.Settings.LogDestinationElementListEditDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Log.Settings.LogDestinationElementListEditDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Log.Settings.LogDestinationElementListEditDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Isab.Log.FileDestinationElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the 
            current <see cref="T:Isab.Log.FileLogSettings"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current 
            <see cref="T:Isab.Log.FileLogSettings"></see>.
            </returns>
        </member>
        <member name="M:Isab.Log.FileDestinationElement.PostDeserialize">
            <summary>
            Called after deserialization.
            </summary>
            <remarks>Used to validate related propery values.</remarks>
        </member>
        <member name="P:Isab.Log.FileDestinationElement.MaxFileSize">
            <summary>
            Limits the sise of the log file. If the maximum file size is 
            reached a new log file is created with a new numeric suffix, 
            starting at 1 and counting up by 1 for each new file that is 
            created. Default is 104857600 bytes (100 MB). The maximum
            file size must not be greater than the maximum log size
            (<see cref="!:FileLogSettings.MaxLogSize"/>).
            </summary>
        </member>
        <member name="P:Isab.Log.FileDestinationElement.MaxLogSize">
            <summary>
            The maximum log size is checked when a new log file is created and
            the oldest logs will be deleted to make room for a new log file. 
            The maximum log size must always be bigger than the maximum file 
            size, as the check will be made on the maximum log size minus the 
            maximum file size, to make sure that there is room for the new log 
            file. Default is 2097152000 bytes (2 GB). The maximum log size must
            not be less than the maximum file size 
            (<see cref="!:FileLogSettings.MaxFileSize"/>).
            </summary>
        </member>
        <member name="P:Isab.Log.FileDestinationElement.DaysToKeep">
            <summary>
            Number of days that log files should be kept before they are deleted.
            Default is 31.
            </summary>
        </member>
        <member name="P:Isab.Log.FileDestinationElement.LogPath">
            <summary>
            The path to the directory used to put the log files in.
            Default is ".\log".
            </summary>
        </member>
        <member name="P:Isab.Log.FileDestinationElement.FileNameSuffix">
            <summary>
            This is an optional suffix to the log file name. It will be 
            appended after the date, separated by a dot (.). The suffix
            can only contain alfanumeric letters and have a max length of 20.
            Default is "Default".
            </summary>
        </member>
        <member name="M:Isab.Log.TextFormatter.FormatLogString(Isab.Log.ILogEntry)">
            <summary>
            Formats the log entry with entries separated by semicolon and exceptions
            separated by a new line. 
            </summary>
            <param name="aLogEntry">The log entry to format.</param>
            <returns>The formated log entry.</returns>
        </member>
        <member name="T:Isab.Log.Log">
            <summary>
            A class that helps to log information and errors to help track down
            the source of logical and runtime errors.
            </summary>
            <remarks>Be aware of that the logging isn't guaranteed to happen, as
            exceptions are swallowed and lock timeouts disregared. My belive is
            that an informative log shouldn't make the program fail if it otherwise
            works ok. This log class should hence not be used to log buisniess
            critical information.
            </remarks>
            Author: Niklas Lagergren, 2005-04-19, Updated 2007-06-29
        </member>
        <member name="F:Isab.Log.Log.LOG_LOCK_TIMEOUT">
            <summary>
            Number of milliseconds before timeout trying to accuier a log lock;
            </summary>
        </member>
        <member name="M:Isab.Log.Log.CheckDisposed">
            <summary>
            Checks if the object is disposed and if so throw an ObjectDisposedException.
            </summary>
        </member>
        <member name="M:Isab.Log.Log.WriteRepetitiveEntryMessage">
            <summary>
            Writes the last message to the log file.
            </summary>
        </member>
        <member name="M:Isab.Log.Log.WriteEntry(Isab.Log.ILogEntry)">
            <summary>
            Writes the entry to the assosciated log destination and text writer streams.
            </summary>
            <param name="aLogEntry">The log entry.</param>
        </member>
        <member name="M:Isab.Log.Log.Write(System.String,Isab.Log.LogLevelsEnum)">
            <summary>
            Writes a new entry to the log.
            </summary>
            <param name="aMessage">The message to log.</param>
            <param name="aLogLevel">The log level to associate with the message.</param>
            <remarks>This method is thread safe, but does not guarantee that the entry get's written.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.Write(System.String,System.String[],Isab.Log.LogLevelsEnum)">
            <summary>
            Writes a new entry to the log.
            </summary>
            <param name="aMessage">The message to log.</param>
            <param name="aCategories">The categories to log.</param>
            <param name="aLogLevel">The log level to associate with the message.</param>
            <remarks>This method is thread safe, but does not guarantee that the entry get's written. 
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.Write(System.String,System.String,Isab.Log.LogLevelsEnum)">
            <summary>
            Writes a new entry to the log.
            </summary>
            <param name="aMessage">The message to log.</param>
            <param name="aCategory">The category to log.</param>
            <param name="aLogLevel">The log level to associate with the message.</param>
            <remarks>This method is thread safe, but does not guarantee that the entry get's written. 
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.Write(System.String,System.String,Isab.Log.LogLevelsEnum,System.Exception)">
            <summary>
            Writes a new entry to the log.
            </summary>
            <param name="aMessage">The message to log.</param>
            <param name="aCategory">The category to log.</param>
            <param name="aLogLevel">The log level to associate with the message.</param>
            <param name="aException">The exception to log.</param>
            <remarks>This method is thread safe, but does not guarantee that the entry get's written. 
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.Write(System.String,Isab.Log.LogLevelsEnum,System.Exception)">
            <summary>
            Writes a new entry to the log.
            </summary>
            <param name="aMessage">The message to log.</param>
            <param name="aLogLevel">The log level to associate with the message.</param>
            <param name="aException">The exception to log.</param>
            <remarks>This method is thread safe, but does not guarantee that the entry get's written. 
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.Write(System.String,System.String[],Isab.Log.LogLevelsEnum,System.Exception)">
            <summary>
            Writes a new entry to the log.
            </summary>
            <param name="aMessage">The message to log.</param>
            <param name="aCategories">The categories to log.</param>
            <param name="aLogLevel">The log level to associate with the message.</param>
            <param name="aException">The exception to log.</param>
            <remarks>This method is thread safe, but does not guarantee that the entry get's written. 
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.Write(Isab.Log.ILogEntry)">
            <summary>
            Writes a new entry to the log.
            </summary>
            <param name="aLogEntry">The log entry to write.</param>
            <remarks>This method is thread safe, but does not guarantee that the entry get's written. 
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.AddStream(System.IO.TextWriter)">
            <summary>
            Adds an additional text stream to write the log output to. 
            </summary>
            <param name="aTextWriter">The open and ready to receive stream to write to.</param>
            <example>MyLog.AddStream(Console.Out);</example>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.RemoveStream(System.IO.TextWriter)">
            <summary>
            Removes a stream from the list of streams that the log class writes to.
            </summary>
            <remarks>Only streams added with AddStream can be removed. The default
            output stream can never be removed.</remarks>
            <param name="aTextWriter">The stream to remove.</param>
            <example>MyLog.RemoveStream(Console.Out);</example>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.IsLogLevelActive(Isab.Log.LogLevelsEnum)">
            <summary>
            Checks if a loglevel is active, ie. if log statements with that level is beeing logged.
            </summary>
            <param name="aLogLevel">The log level to check</param>
            <returns>A boolean indicating if the given log level is active (true).</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.IsCategoryActive(System.String)">
            <summary>
            Determines whether the specified category is beeing logged or not.
            </summary>
            <param name="aCategory">The category to check.</param>
            <returns>
            	<c>true</c> if the category is beeing logged; otherwise, <c>false</c>.
            </returns>
            <remarks>Categories are active by default.</remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the object has been disposed.</exception>
        </member>
        <member name="M:Isab.Log.Log.IsCategoryActive(System.String[])">
            <summary>
            Determines whether any of the specified categories is beeing logged or not.
            </summary>
            <param name="aCategories">The categories to check.</param>
            <returns>
            	<c>true</c> if any of the specified categories is beeing logged; 
                otherwise, <c>false</c>.
            </returns>
            <remarks>Categories are active by default.</remarks>
        </member>
        <member name="M:Isab.Log.Log.Close">
            <summary>
            Checks if a logfile is open and then closes it if that was the case.
            </summary>
        </member>
        <member name="M:Isab.Log.Log.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Log.Log"/> class.
            </summary>
        </member>
        <member name="M:Isab.Log.Log.Dispose">
            <summary>
            Closes the log file and removes any references made to external streams.
            </summary>       
        </member>
        <member name="M:Isab.Log.Log.Dispose(System.Boolean)">
            <summary>
            Closes the log file and removes any references made to external streams.
            </summary>       
        </member>
        <member name="M:Isab.Log.Log.Finalize">
            <summary>
            Finalizer to make sure that dispose is called.
            </summary>
        </member>
        <member name="M:Isab.Log.Log.InjectLogSettings(Isab.Log.LogSettings)">
            <summary>
            Injects the log settings.
            </summary>
            <param name="aLogSettings">The log settings.</param>
        </member>
        <member name="T:Isab.Log.LogFactory">
            <summary>
            Methods to create and manage <see cref="!:FileLog"/> instances 
            and configuration.
            </summary>
            <!-- Author: Niklas Lagergren, 2007-06-29 -->
        </member>
        <member name="M:Isab.Log.LogFactory.CreateInstance">
            <summary>
            Creates a new <see cref="T:Isab.Log.Log"/> instance.
            </summary>
            <returns>A new <see cref="T:Isab.Log.Log"/> instance</returns>
            <remarks>Tries to load the settings from the &lt;LogSettings&gt;
            section in the applications default configuration. If that 
            fails the default values of <see cref="T:Isab.Log.LogSettings"/> will be
            used.</remarks>
        </member>
        <member name="M:Isab.Log.LogFactory.CreateInstance(Isab.Log.LogSettings,Isab.Log.LogScope)">
            <summary>
            Creates a new <see cref="T:Isab.Log.Log"/> instance from the provided
            <see cref="T:Isab.Log.LogSettings"/>.
            </summary>
            <param name="aLogSettings">The settings used to create the file log
            settings object.</param>
            <returns>A new <see cref="T:Isab.Log.Log"/> instance</returns>
        </member>
        <member name="M:Isab.Log.LogFactory.CreateInstance(System.String,Isab.Log.LogScope)">
            <summary>
            Creates a new <see cref="!:FileLog"/> instance.
            </summary>
            <param name="aSectionName">Name of the configuration section for 
            <see cref="!:FileLogSettings"/> in the default applications 
            configuration.</param>
            <returns>A new <see cref="!:FileLog"/> instance</returns>
            <exception cref="T:System.ArgumentNullException">Is thrown if the parameter
            aSectionName is null or empty.</exception>
            <remarks>Tries to load the specified settings from the applications
            default configuration.</remarks>
        </member>
        <member name="M:Isab.Log.LogFactory.CreateInstance(System.String,Isab.Configuration.Scope,Isab.Log.LogScope)">
            <summary>
            Creates a new <see cref="!:FileLog"/> instance.
            </summary>
            <param name="aSectionName">Name of the configuration section for 
            <see cref="!:FileLogSettings"/> in the specified configuration file.
            </param>
            <param name="aScope">The scope used when loading the settings.</param>
            <returns>A new <see cref="!:FileLog"/> instance.</returns>
        </member>
        <member name="T:Isab.Log.LogSettings">
            <summary>
            Contains the different settings for the Log class.
            </summary>
            <!-- Author: Niklas Lagergren, 2005-04-19 -->
        </member>
        <member name="M:Isab.Log.LogSettings.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the 
            current <see cref="T:Isab.Log.FileLogSettings"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current 
            <see cref="T:Isab.Log.FileLogSettings"></see>.
            </returns>
        </member>
        <member name="P:Isab.Log.LogSettings.Properties">
            <summary>
            Gets the collection of properties.
            </summary>
            <value></value>
            <returns>The 
            <see cref="T:System.Configuration.ConfigurationPropertyCollection">
            </see> collection of properties for the element.</returns>
        </member>
        <member name="P:Isab.Log.LogSettings.LogError">
            <summary>
            Determens if entries with log level Error should be logged.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Isab.Log.LogSettings.LogWarning">
            <summary>
            Determens if entries with log level Warning should be logged.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Isab.Log.LogSettings.LogInfo">
            <summary>
            Determens if entries with log level Information should be logged.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Isab.Log.LogSettings.LogInput">
            <summary>
            Determens if entries with log level Input should be logged.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Isab.Log.LogSettings.LogOutput">
            <summary>
            Determens if entries with log level Output should be logged.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Isab.Log.LogSettings.LogDebug">
            <summary>
            Determens if entries with log level Debug should be loged.
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Isab.Log.LogSettings.PreventRepetitiveEntries">
            <summary>
            If true then repetitive logging of the exact same information 
            directly after the previous call is prevented and will not be 
            shown in the log file. Instead an internal counter is increased 
            and when a new log message is about to be logged information 
            about how many times the previous message was ignored will be 
            written to the log file. 
            Default is <c>true</c>.
            </summary>
        </member>
        <member name="P:Isab.Log.LogSettings.Categories">
            <summary>
            Categories are supported as an extended possibility to filter log 
            messages in addition to the log levels. A category is logged by 
            default, but can be turned off by adding it to this dictionary and
            set its value to false.
            </summary>
        </member>
        <member name="T:Isab.Log.LogEntry">
            <summary>
            Represents a single log entry.
            </summary>
        </member>
        <member name="P:Isab.Log.LogEntry.Message">
            <summary>
            Gets or sets the message to log.
            </summary>
        </member>
        <member name="P:Isab.Log.LogEntry.Categories">
            <summary>
            Gets or sets the categories to log.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:Isab.Log.LogEntry.LogLevel">
            <summary>
            Gets or sets the log level to associate with the message..
            </summary>
            <value>The log level.</value>
        </member>
        <member name="P:Isab.Log.LogEntry.Exception">
            <summary>
            Gets or sets the exception to log.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:Isab.Parameters">
            <summary>
            Used to parse command line parameters.
            </summary>
        </member>
        <member name="M:Isab.Parameters.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Parameters"/> class.
            </summary>
            <param name="aArgs">Application arguments.</param>
        </member>
        <member name="P:Isab.Parameters.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified a param name.
            </summary>
            <value></value>
        </member>
        <member name="P:Isab.Parameters.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified a anon index.
            </summary>
            <value></value>
        </member>
        <member name="P:Isab.Parameters.AnonParams">
            <summary>
            Gets a copy of the anonymous parameters.
            </summary>
            <value>The anononymous parameters.</value>
        </member>
        <member name="T:Isab.Plugins.PluginCategorys">
            <summary>
            
            </summary>
        </member>
        <member name="F:Isab.Plugins.PluginCategorys.ROUTINES">
            <summary>
            
            </summary>
        </member>
        <member name="M:Isab.Plugins.TypeHelper.GetConfigurationType(System.Type)">
            <summary>
            Gets the configuration attributes type
            </summary>
            <param name="aType">A type.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Plugins.TypeHelper.AddType(System.IO.FileInfo,System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Add all plugins that the file contains to grid
            </summary>
            <param name="aFileInfo"></param>
            <param name="aPlugins"></param>
        </member>
        <member name="F:Isab.Plugins.frmPluginCollectionEditorAdvanced.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Plugins.frmPluginCollectionEditorAdvanced.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Plugins.frmPluginCollectionEditorAdvanced.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Isab.Plugins.frmPluginCollectionEditorAdvanced.SelectedItem">
            <summary>
            Gets the selected item.
            </summary>
            <value>The selected item.</value>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Isab.Plugins.PluginCollectionEditorAdvanced" -->
        <member name="T:Isab.Plugins.PluginTypeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Isab.Plugins.PluginTypeAttribute.PluginType">
            <summary>
            Gets or sets the type of the plugin.
            </summary>
            <value>The type of the plugin.</value>
        </member>
        <member name="M:Isab.Plugins.ObjectBuilder.TryInvoke(System.Type,System.Object@,System.Object[])">
            <summary>
            Creates an instance of the provided type. Will allso try to provide as many 
            constructor arguments as possible when createing the object
            </summary>
            <typeparam name="typeToInstantiate">The type that you want to instantiate</typeparam>
            <param name="aParams">Params to pass to the constructor, null if no parameter should be passed</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Plugins.ObjectBuilder.ResolveConstructor(System.Type,System.Object[],System.Reflection.ConstructorInfo@)">
            <summary>
            Resolves witch constructor that should be used
            </summary>
            <param name="aTypeToInstantiate"></param>
            <returns></returns>
        </member>
        <member name="P:Isab.Plugins.ObjectBuilder.TypeMappings">
            <summary>
            A map type is a type that when Resolved will be created as the mapped type instead of the provided type
            </summary>
        </member>
        <member name="M:Isab.Plugins.PluginFactory.Create``1(Isab.Plugins.PluginConfigurationElement,System.Object[])">
            <summary>
            Creates the plugin configured in this element.
            It requires that the plugin has a zero parameter constructor
            or a constructor that only takes the settings class as a parameter
            </summary>
            <typeparam name="rt"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Isab.Plugins.TypeResolver.Resolve(System.String,System.String)">
            <summary>
            Resolves the specified type. If the assembly file isent found
            it will search for it in all subdirectorys of the executing process
            </summary>
            <param name="aAssemblyFile">A assembly file.</param>
            <param name="aTypeName">Name of a type.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Plugins.TypeResolver.TryResolve(System.String,System.String,System.Type@)">
            <summary>
            Tries the resolve the given type.
            </summary>
            <param name="aAssemblyFile">A assembly file.</param>
            <param name="aTypeName">Name of a type.</param>
            <param name="aResolvedType">Type of a resolved.</param>
            <returns></returns>
        </member>
        <member name="P:Isab.Plugins.TypeResolver.AppPath">
            <summary>
            Gets the running applications path
            </summary>
        </member>
        <member name="P:Isab.Plugins.TypeResolver.KeyToTypeBuffer">
            <summary>
            Buffer used to speed up the process of finding types based on a key
            </summary>
        </member>
        <member name="T:Isab.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Isab.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Isab.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Isab.Reflection.TypeExtentions">
            <summary>
            Extention functions for the Type class
            </summary>
        </member>
        <member name="M:Isab.Reflection.TypeExtentions.GetDescription(System.Type)">
            <summary>
            Gets the description attribute value. Will return "" if the attribute isent found.
            </summary>
            <param name="aType">A type.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Reflection.TypeExtentions.GetConfigurationElementType(System.Type)">
            <summary>
            Gets the configuration type of this class..
            this is applyable
            </summary>
            <param name="aType"></param>
            <returns></returns>
        </member>
        <member name="M:Isab.Reflection.TypeExtentions.GetCategory(System.Type)">
            <summary>
            Gets the category attribute value. Will return "" if the attribute isent found.
            </summary>
            <param name="aType">A type.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Reflection.TypeExtentions.GetDisplayName(System.Type)">
            <summary>
            Gets the display name attribute value. Wsill return "" if the attribute isent found.
            </summary>
            <param name="aType">A type.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Reflection.TypeExtentions.SetStaticProperties``1(System.Type,``0)">
            <summary>
            Sets static properties of the given propertyType to the provided aValue.
            </summary>
            <typeparam name="propertyType">The property type to search for</typeparam>
            <param name="aTypeToSearch">The class type that we are going to search</param>
            <param name="aValue">The value to set the properties to</param>
            <returns>true if all went well if not then false</returns>
        </member>
        <member name="T:Isab.Visio.Configuration.CustomProperty">
            <summary>
            Custom property for Shape
            </summary>
        </member>
        <member name="P:Isab.Visio.Configuration.CustomProperty.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Isab.Visio.Configuration.CustomProperty.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Isab.Visio.Configuration.CustomProperty.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Isab.Visio.Configuration.CustomProperty.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Isab.Visio.Configuration.CustomPropertyCollection">
            <summary>
            Collection of custom properties for shape
            </summary>
        </member>
        <member name="M:Isab.Visio.Configuration.CustomPropertyCollection.GetElementKey(Isab.Visio.Configuration.CustomProperty)">
            <summary>
            Gets the element key.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.Visio.Configuration.PageElementCollection">
            <summary>
            Collection of pages
            </summary>
        </member>
        <member name="M:Isab.Visio.Configuration.PageElementCollection.GetElementKey(Isab.Visio.Configuration.PageElement)">
            <summary>
            Gets the element key.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.Visio.Configuration.PageElement">
            <summary>
            Visio Page
            </summary>
        </member>
        <member name="P:Isab.Visio.Configuration.PageElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Isab.Visio.Configuration.PageElement.FormTemplate">
            <summary>
            Gets or sets the form template.
            </summary>
            <value>The form template.</value>
        </member>
        <member name="P:Isab.Visio.Configuration.PageElement.Shapes">
            <summary>
            Gets or sets the shapes.
            </summary>
            <value>The shapes.</value>
        </member>
        <member name="T:Isab.Visio.Configuration.ShapeElement">
            <summary>
            Shape
            </summary>
        </member>
        <member name="P:Isab.Visio.Configuration.ShapeElement.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Isab.Visio.Configuration.ShapeElement.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Isab.Visio.Configuration.ShapeElement.Form">
            <summary>
            Gets or sets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Isab.Visio.Configuration.ShapeElement.Shapes">
            <summary>
            Gets or sets the shapes.
            </summary>
            <value>The shapes.</value>
        </member>
        <member name="P:Isab.Visio.Configuration.ShapeElement.CustomProperties">
            <summary>
            Gets or sets the custom properties.
            </summary>
            <value>The custom properties.</value>
        </member>
        <member name="T:Isab.Visio.Configuration.ShapeElementCollection">
            <summary>
            Collection of shapes
            </summary>
        </member>
        <member name="M:Isab.Visio.Configuration.ShapeElementCollection.GetElementKey(Isab.Visio.Configuration.ShapeElement)">
            <summary>
            Gets the element key.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.Visio.Configuration.VisioSettings">
            <summary>
            Visio configuration
            </summary>
        </member>
        <member name="P:Isab.Visio.Configuration.VisioSettings.Pages">
            <summary>
            Gets or sets the pages.
            </summary>
            <value>The pages.</value>
        </member>
        <member name="T:System.ServiceEndpointExtentions">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.ServiceEndpointExtentions.SetMaxItemsInObjectGraph(System.ServiceModel.Description.ServiceEndpoint,System.Int32)">
            <summary>
            Sets the max items in object graph.
            </summary>
            <param name="aEndpoint">A endpoint.</param>
            <param name="aValue">A value.</param>
        </member>
        <member name="T:System.ServiceHostExtentions">
            <summary>
            Adds extentions to the ServiceHost class
            </summary>
        </member>
        <member name="M:System.ServiceHostExtentions.AddServiceEndpoint(System.ServiceModel.ServiceHost,System.Type,Isab.WCF.NetTcpBindingSettings,Isab.WCF.NetTcpAdressBuilder)">
            <summary>
            Adds a endpoint to the host
            </summary>
            <param name="aHost">Host to add endpoint to</param>
            <param name="aContract">Contract to assign a endpoint to</param>
            <param name="aBinding">Endpoint binding</param>
            <param name="aAdress">Endpoint adress</param>
            <returns></returns>
        </member>
        <member name="M:System.ServiceHostExtentions.GetCommandLineArguments(System.ServiceModel.ServiceHostBase)">
            <summary>
            Gets the ServiceHosts Commands the line arguments.
            </summary>
            <param name="aHost">A host.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.WCF.NetTcpAdressBuilder">
            <summary>
            Class used to build the adress to a WCF NetTcp host
            </summary>
        </member>
        <member name="M:Isab.WCF.NetTcpAdressBuilder.#ctor">
            <summary>
            Class used to build the adress to a WCF NetTcp host
            </summary>
        </member>
        <member name="M:Isab.WCF.NetTcpAdressBuilder.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Class used to build the adress to a WCF NetTcp host
            </summary>
        </member>
        <member name="M:Isab.WCF.NetTcpAdressBuilder.#ctor(System.String)">
            <summary>
            Class used to build the adress to a WCF NetTcp host
            </summary>
        </member>
        <member name="M:Isab.WCF.NetTcpAdressBuilder.ToEndpointAddress">
            <summary>
            Returns an EndpointAddress built from the Address property
            </summary>
            <returns></returns>
        </member>
        <member name="P:Isab.WCF.NetTcpAdressBuilder.Address">
            <summary>
            The adress built from the Host, Port and ServiceName propertys
            </summary>
        </member>
        <member name="P:Isab.WCF.NetTcpAdressBuilder.Host">
            <summary>
            The DNS or IP adress of the service host
            </summary>
        </member>
        <member name="P:Isab.WCF.NetTcpAdressBuilder.Port">
            <summary>
            Port to the service
            </summary>
        </member>
        <member name="P:Isab.WCF.NetTcpAdressBuilder.ServiceName">
            <summary>
            Name of the service.
            </summary>
        </member>
        <member name="T:Isab.WCF.NetTcpBindingFactory">
            <summary>
            Used to create NetTcpBindings
            </summary>
        </member>
        <member name="M:Isab.WCF.NetTcpBindingFactory.Create(Isab.WCF.NetTcpBindingSettings)">
            <summary>
            Creates a new instance of the NetTcpBinding class based on the provided settings
            </summary>
            <param name="aSettings"></param>
            <returns></returns>
        </member>
        <member name="T:Isab.WCF.NetTcpBindingSettings">
            <summary>
            A Class that describes the settings of a NetTcpBinding
            </summary>
        </member>
        <member name="M:Isab.WCF.NetTcpBindingSettings.#ctor(System.ServiceModel.NetTcpBinding)">
            <summary>
            A Class that describes the settings of a NetTcpBinding
            </summary>
            <param name="aBinding">The class will copy this bindings settings</param>
        </member>
        <member name="M:Isab.WCF.NetTcpBindingSettings.#ctor">
            <summary>
            A Class that describes the settings of a NetTcpBinding
            </summary>
        </member>
        <member name="P:Isab.WCF.NetTcpBindingSettings.MaxItemsInObject">
            <summary>
            Gets or sets the close timeout.
            </summary>
            <value>The close timeout.</value>
        </member>
        <member name="P:Isab.WCF.NetTcpBindingSettings.CloseTimeout">
            <summary>
            Gets or sets the close timeout.
            </summary>
            <value>The close timeout.</value>
        </member>
        <member name="P:Isab.WCF.NetTcpBindingSettings.MaxConnections">
            <summary>
            Gets or sets the max connections.
            </summary>
            <value>The max connections.</value>
        </member>
        <member name="P:Isab.WCF.NetTcpBindingSettings.PortSharingEnabled">
            <summary>
            Gets or sets a value indicating whether [port sharing enabled].
            </summary>
            <value><c>true</c> if [port sharing enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Isab.WCF.NetTcpBindingSettings.ReceiveTimeout">
            <summary>
            Gets or sets the receive timeout.
            </summary>
            <value>The receive timeout.</value>
        </member>
        <member name="P:Isab.WCF.NetTcpBindingSettings.Security">
            <summary>
            Gets or sets the security.
            </summary>
            <value>The security.</value>
        </member>
        <member name="P:Isab.WCF.NetTcpBindingSettings.TransferMode">
            <summary>
            Gets or sets the transfer mode.
            </summary>
            <value>The transfer mode.</value>
        </member>
        <member name="P:Isab.WCF.NetTcpBindingSettings.MaxReceivedMessageSize">
            <summary>
            Gets or sets the size of the max received message.
            </summary>
            <value>The size of the max received message.</value>
        </member>
        <member name="P:Isab.WCF.NetTcpBindingSettings.MaxBufferSize">
            <summary>
            Gets or sets the size of the max buffer.
            </summary>
            <value>The size of the max buffer.</value>
        </member>
        <member name="T:Isab.WCF.ServiceHostContainer">
            <summary>
            Creates an instance of the ServiceHost. And once opended it keeps it alive
            </summary>
        </member>
        <member name="M:Isab.WCF.ServiceHostContainer.#ctor(Isab.WCF.NetTcpAdressBuilder,Isab.WCF.NetTcpBindingSettings,System.Type,System.Type,Isab.Log.ILog)">
            <summary>
            Creates an instance of the ServiceHost. And once opended it keeps it alive
            </summary>
            <param name="aAddress">Address to start a host on</param>
            <param name="aBinding">The hosts bindings</param>
            <param name="aInstaceType">The service instance to host</param>
            <param name="aContractType">The service instance´s contract</param>
            <param name="aLog">Log object to use</param>
        </member>
        <member name="M:Isab.WCF.ServiceHostContainer.Open">
            <summary>
            Opens the ServiceHost
            </summary>
        </member>
        <member name="M:Isab.WCF.ServiceHostContainer.Close">
            <summary>
            Closes the servicehost
            </summary>
        </member>
        <member name="M:Isab.WCF.ServiceHostContainer.CloseHost">
            <summary>
            Closes the current host
            </summary>
        </member>
        <member name="P:Isab.WCF.ServiceHostContainer.ContractType">
            <summary>
            Gets or sets the type of the contract.
            </summary>
            <value>The type of the contract.</value>
        </member>
        <member name="P:Isab.WCF.ServiceHostContainer.InstanceType">
            <summary>
            Gets or sets the type of the instance.
            </summary>
            <value>The type of the instance.</value>
        </member>
        <member name="T:Isab.WCF.ServiceHostFactory">
            <summary>
            Factory for creating ServiceHosts
            </summary>
            <example>
            <![CDATA[
            static void Main(string[] args)
            {
               NetTcpAdressBuilder addr = new NetTcpAdressBuilder("localhost", 22222, "chatservice");
               NetTcpBindingSettings binding = new NetTcpBindingSettings();
               ServiceHost sh = ServiceHostFactory.Create(typeof(Service1), typeof(IService1), binding, addr);
               sh.Open();
               Console.WriteLine("Press enter to exit...");
               Console.ReadLine();
               sh.Close();
            }
            ]]>
            </example>
        </member>
        <member name="M:Isab.WCF.ServiceHostFactory.Create(System.Type,System.Type,Isab.WCF.NetTcpBindingSettings,Isab.WCF.NetTcpAdressBuilder)">
            <summary>
            Creates a new instance of the ServiceHost class.
            Will create a new instance of the hosted type for each client
            </summary>
            <param name="aTypeToHost">The type that we want to host</param>
            <param name="aContract">The contract of the type we want to host (the interface defining our hosted type)</param>
            <param name="aBinding">Endpoint binding</param>
            <param name="aAdress">Endpoint adress</param>
            <returns></returns>
        </member>
        <member name="M:Isab.WCF.ServiceHostFactory.Create(System.Type,System.Type,Isab.WCF.NetTcpBindingSettings,Isab.WCF.NetTcpAdressBuilder,System.String,Isab.Log.ILog)">
            <summary>
            Creates the specified a type to host.
            </summary>
            <param name="aTypeToHost">A type to host.</param>
            <param name="aContract">A contract.</param>
            <param name="aBinding">A binding.</param>
            <param name="aAdress">A adress.</param>
            <param name="aLog">A log.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.WCF.ServiceHostFactory.Create(Isab.WCF.Settings.ServiceElement)">
            <summary>
            Creates the specified a settings.
            </summary>
            <param name="aSettings">A settings.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.WCF.ServiceHostFactory.Create(Isab.WCF.Settings.ServiceElement,Isab.Log.ILog)">
            <summary>
            Creates the specified a settings.
            </summary>
            <param name="aSettings">A settings.</param>
            <param name="aLog">A log.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.WCF.ServiceHostFactory.Create(Isab.WCF.Settings.ServiceElement,System.Object,Isab.Log.ILog)">
            <summary>
            Creates the specified a settings.
            </summary>
            <param name="aSettings">A settings.</param>
            <param name="aSingletonObject">A singleton object.</param>
            <param name="aLog">A log.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.WCF.ServiceHostFactory.Create(System.Object,System.Type,Isab.WCF.NetTcpBindingSettings,Isab.WCF.NetTcpAdressBuilder)">
            <summary>
            Creates a new instance of the ServiceHost class.
            Will use the provided SingletonInstance for every client
            </summary>
            <param name="aSingletonInstance">A singleton instance.</param>
            <param name="aContract">The contract of the type we want to host (the interface defining our hosted type)</param>
            <param name="aBinding">Endpoint binding</param>
            <param name="aAdress">Endpoint adress</param>
            <returns></returns>
        </member>
        <member name="M:Isab.WCF.ServiceHostFactory.CreateHost(System.Type,System.Type,System.Object,Isab.WCF.NetTcpBindingSettings,Isab.WCF.NetTcpAdressBuilder,System.String,Isab.Log.ILog)">
            <summary>
            Creates a new instance of the ServiceHost class.
            Will create a new instance of the hosted type for each client
            </summary>
            <param name="aTypeToHost">The type that we want to host</param>
            <param name="aContract">The contract of the type we want to host (the interface defining our hosted type)</param>
            <param name="aSingletonObject">A singleton object.</param>
            <param name="aBinding">Endpoint binding</param>
            <param name="aAdress">Endpoint adress</param>
            <param name="aCommandLineArguments">A command line arguments.</param>
            <param name="aLog">A log.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.WCF.Settings.ServiceElement">
            <summary>
            This class describes the settings for a WCF Service
            </summary>
        </member>
        <member name="M:Isab.WCF.Settings.ServiceElement.CreateDummy">
            <summary>
            Creates an example version of the class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.WCF.Settings.ServiceElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Isab.WCF.Settings.ServiceElement.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Isab.WCF.Settings.ServiceElement.CommandLineArguments">
            <summary>
            Gets or sets the params.
            </summary>
            <value>The params.</value>
        </member>
        <member name="P:Isab.WCF.Settings.ServiceElement.ContractAssembly">
            <summary>
            Contract interface assembly
            </summary>
        </member>
        <member name="P:Isab.WCF.Settings.ServiceElement.ContractInterface">
            <summary>
            Contract interface
            </summary>
        </member>
        <member name="P:Isab.WCF.Settings.ServiceElement.InstanceAssembly">
            <summary>
            Instance assembly
            </summary>
        </member>
        <member name="P:Isab.WCF.Settings.ServiceElement.InstanceClass">
            <summary>
            Instance class
            </summary>
        </member>
        <member name="P:Isab.WCF.Settings.ServiceElement.Address">
            <summary>
            Adress assigned to the service
            </summary>
        </member>
        <member name="P:Isab.WCF.Settings.ServiceElement.Binding">
            <summary>
            Service binding
            </summary>
        </member>
        <member name="P:Isab.WCF.Settings.ServiceElement.Enable">
            <summary>
            If the service is enabled or not
            </summary>
        </member>
        <member name="T:Isab.WCF.Settings.ServiceElementCollection">
            <summary>
            Collection of the class ServiceElement
            </summary>
        </member>
        <member name="M:Isab.WCF.Settings.ServiceElementCollection.GetService(System.Type)">
            <summary>
            Gets all the elements that describes the given contract type
            </summary>
            <param name="aContract">Contract type to find</param>
        </member>
        <member name="M:Isab.WCF.Settings.ServiceElementCollection.GetService(System.Type,System.Boolean)">
            <summary>
            Gets all the elements that describes the given contract type
            </summary>
            <param name="aContract">Contract type to find</param>
            <param name="aEnabled">If we want to list enabled or disabled elements</param>
        </member>
        <member name="T:Isab.WCF.Settings.ServiceSettings">
            <summary>
            Class that stores settings for WCF services
            </summary>
        </member>
        <member name="M:Isab.WCF.Settings.ServiceSettings.CreateDummy">
            <summary>
            Creates an example version of the ServiceSettings class
            </summary>
            <returns></returns>
        </member>
        <member name="P:Isab.WCF.Settings.ServiceSettings.Services">
            <summary>
            Gets or sets the collection of services
            </summary>
        </member>
        <member name="F:Isab.WCF.Settings.VisualEditing.ServiceElementEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.WCF.Settings.VisualEditing.ServiceElementEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.WCF.Settings.VisualEditing.ServiceElementEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Isab.WCF.Settings.VisualEditing.ServiceSettingsEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.WCF.Settings.VisualEditing.ServiceSettingsEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.WCF.Settings.VisualEditing.ServiceSettingsEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Isab.Configuration.IsabConfigurationElementCollection`1">
            <summary>
            A collection of IsabConfigurationElements
            </summary>
            <typeparam name="T">The element to list</typeparam>
        </member>
        <member name="M:Isab.Configuration.IsabConfigurationElementCollection`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.XmlConfigurationSourceEditor.Display(System.Windows.Forms.IWin32Window,Isab.Configuration.Common.ConfigurationSourceElement,System.Configuration.Configuration)">
            <summary>
            Displays an editor for the sql configuration
            source element and return true if the changes should be used or false
            if the changes should be disregarded.
            </summary>
            <param name="aParent">The parent window.</param>
            <param name="aSource">The configuration source to edit.</param>
            <param name="aConfig">The configuration file that contains the configuration source element.
            This should genereally not be used but are passed along soo that the SqlConfigurationSource
            can change the connection strings.</param>
            <returns>
            Return true if the changes should be used or false
            if the changes should be disregarded.
            </returns>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.XmlConfigurationSourceEditor.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the okButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.XmlConfigurationSourceEditor.cancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the cancelButton control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Isab.Configuration.VisualEditing.XmlConfigurationSourceEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.XmlConfigurationSourceEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Isab.Configuration.VisualEditing.XmlConfigurationSourceEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Isab.Data.DataRowHelpers">
            <summary>
            Collection of usefull methods when using Isab.Data
            </summary>
        </member>
        <member name="M:Isab.Data.DataRowHelpers.GetKeys``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the keys from a collection of DataRow
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aCollection">A collection.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.DataRowHelpers.GetValue``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            Returns the first found value in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aCollection">A collection.</param>
            <param name="aKey">A key.</param>
            <param name="aDefaultValue">A default value.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.DataRowHelpers.SetValue``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object)">
            <summary>
            Sets the given value to ether the first row that contains the key or if no row contains the key
            the last row in the collection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aCollection">A collection.</param>
            <param name="aKey">A key.</param>
            <param name="aValue">A value.</param>
        </member>
        <member name="T:Isab.Data.DataRowObjectWrapper">
            <summary>
            Wrapps an object and publishes its properties 'Ala DataRow'
            </summary>
        </member>
        <member name="M:Isab.Data.DataRowObjectWrapper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Data.DataRowObjectWrapper"/> class.
            </summary>
            <param name="aObject">A object.</param>
        </member>
        <member name="M:Isab.Data.DataRowObjectWrapper.GetKeys">
            <summary>
            Gets the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.DataRowObjectWrapper.SetValue(System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="aKey">A key.</param>
            <param name="aValue">A value.</param>
        </member>
        <member name="M:Isab.Data.DataRowObjectWrapper.GetValue(System.String,System.Object)">
            <summary>
            Returns the value for the given key, if not found defaultvalue is returned
            </summary>
            <param name="aKey">A key.</param>
            <param name="aDefaultValue">A default value.</param>
            <returns></returns>
        </member>
        <member name="P:Isab.Data.DataRowObjectWrapper.Datasource">
            <summary>
            Gets or sets the datasource.
            </summary>
            <value>The datasource.</value>
        </member>
        <member name="T:Isab.Data.ObjectToDataRowHelpers">
            <summary>
            Methods that help converting an object to a datarow
            </summary>
        </member>
        <member name="M:Isab.Data.ObjectToDataRowHelpers.TryGetValue(System.Object,System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="aObject">A object.</param>
            <param name="aKey">A key.</param>
            <param name="aValue">A value.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.Data.PrefixedDataRow">
            <summary>
            Prefixed datarow
            </summary>
        </member>
        <member name="M:Isab.Data.PrefixedDataRow.#ctor(System.String,Isab.Data.IDataRowGet)">
            <summary>
            Initializes a new instance of the <see cref="T:Isab.Data.PrefixedDataRow"/> class.
            </summary>
            <param name="aPrefix">A prefix.</param>
            <param name="aDataRow">A data row.</param>
        </member>
        <member name="M:Isab.Data.PrefixedDataRow.GetKeys">
            <summary>
            Gets the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.PrefixedDataRow.GetValue(System.String,System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="aKey">A key.</param>
            <param name="aDefaultValue">A default value.</param>
            <returns></returns>
        </member>
        <member name="M:Isab.Data.PrefixedDataRow.SetValue(System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="aKey">A key.</param>
            <param name="aValue">A value.</param>
        </member>
        <member name="M:Isab.Data.PrefixedDataRow.ContainsKey(System.String)">
            <summary>
            Determines whether the specified a key contains key.
            </summary>
            <param name="aKey">A key.</param>
            <returns>
              <c>true</c> if the specified a key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Isab.Data.PrefixedDataRow.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="aKey">A key.</param>
            <param name="aVALUE">A VALUE.</param>
            <returns></returns>
        </member>
        <member name="T:System.DataContextExtentions">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.DataContextExtentions.ExecuteDataRow``1(System.Data.Linq.DataContext,System.String)">
            <summary>
            Executes the data row.
            </summary>
            <typeparam name="t"></typeparam>
            <param name="aContext">A context.</param>
            <param name="aQuery">A query.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.Data.Linq.DataContextFactory">
            <summary>
            Creates DataContext's
            </summary>
        </member>
        <member name="M:Isab.Data.Linq.DataContextFactory.Create``1(System.String,Isab.Log.ILog)">
            <summary>
            Creates an instance of a DataContext
            </summary>
            <typeparam name="t"></typeparam>
            <param name="aConnectionString">A connection string.</param>
            <param name="aLog">A log.</param>
            <returns></returns>
        </member>
        <member name="T:System.IDataRowExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.IDataRowExtensions.ReadEndElement(System.Xml.XmlReader,System.String)">
            <summary>
            Reads until it finds the specified end element to read
            </summary>
            <param name="aReader"></param>
            <param name="aName"></param>
        </member>
        <member name="M:System.IDataRowExtensions.Clone``1(Isab.Data.IDataRowGet)">
            <summary>
            Copies the given datarow
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aSource"></param>
            <returns></returns>
        </member>
        <member name="M:System.IDataRowExtensions.Clone``1(System.Collections.Generic.IList{``0})">
            <summary>
            Clones a list of datarows
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aSource"></param>
            <returns></returns>
        </member>
        <member name="T:Isab.File.CommandLineArgumentsParser">
            <summary>
            Parses a command lines arguments, ala CodeProjekt :)
            </summary>
        </member>
        <member name="M:Isab.File.CommandLineArgumentsParser.Parse(System.String[])">
            <summary>
            Parses an argument string that uses '-', '/' or '\' as its function prefixes
            </summary>
            <param name="Args">The args.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.WCF.CommandLineArguments">
            <summary>
            
            </summary>
        </member>
        <member name="M:Isab.WCF.CommandLineArguments.GetValue(System.String,System.String)">
            <summary>
            Gets the command line argument.
            </summary>
            <param name="arg">The arg.</param>
            <param name="defaultvalue">The defaultvalue.</param>
            <returns></returns>
        </member>
        <member name="T:Isab.WCF.EServiceHost">
            <summary>
            An extended version of the service host... 
            </summary>
        </member>
        <member name="M:Isab.WCF.EServiceHost.#ctor(System.Object,System.Uri[])">
            <summary>
            Initializes a new instance of the System.ServiceModel.ServiceHost class with
            the instance of the service and its base addresses specified.
            </summary>
            <param name="singletonInstance">The instance of the hosted service.</param>
            <param name="baseAddresses">An System.Array of type System.Uri that contains the base addresses for the hosted service.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="singletonInstance"/> is null.</exception>
        </member>
        <member name="M:Isab.WCF.EServiceHost.#ctor(System.Object,System.String,System.Uri[])">
            <summary>
            Initializes a new instance of the System.ServiceModel.ServiceHost class with
            the instance of the service and its base addresses specified.
            </summary>
            <param name="singletonInstance">The instance of the hosted service.</param>
            <param name="commandLineArguments">The command line arguments.</param>
            <param name="baseAddresses">An System.Array of type System.Uri that contains the base addresses for the hosted service.</param>
        </member>
        <member name="M:Isab.WCF.EServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            Initializes a new instance of the System.ServiceModel.ServiceHost class with
            the type of service and its base addresses specified.
            </summary>
            <param name="serviceType">The type of hosted service.</param>
            <param name="baseAddresses">An array of type System.Uri that contains the base addresses for the hosted service.</param>
        </member>
        <member name="M:Isab.WCF.EServiceHost.#ctor(System.Type,System.String,System.Uri[])">
            <summary>
            Initializes a new instance of the System.ServiceModel.ServiceHost class with
            the type of service and its base addresses specified.
            </summary>
            <param name="serviceType">The type of hosted service.</param>
            <param name="parameters">The parameters.</param>
            <param name="baseAddresses">An array of type System.Uri that contains the base addresses for the hosted service.</param>
        </member>
        <member name="P:Isab.WCF.EServiceHost.CommandLineArguments">
            <summary>
            Gets the parameters. For this ServiceHost instance
            </summary>
            <value>The parameters.</value>
        </member>
    </members>
</doc>
